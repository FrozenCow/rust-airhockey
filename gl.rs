/* automatically generated by rust-bindgen */

pub const GL_COLOR_BUFFER_BIT: GLenum = 0x00004000;
pub const GL_DEPTH_BUFFER_BIT: GLenum = 0x00000100;
pub const GL_ACCUM_BUFFER_BIT: GLenum = 0x00000200;
pub const GL_STENCIL_BUFFER_BIT: GLenum = 0x00000400;
pub const GL_POINTS: GLenum = 0x0000;
pub const GL_LINES: GLenum = 0x0001;
pub const GL_LINE_STRIP: GLenum = 0x0003;
pub const GL_LINE_LOOP: GLenum = 0x0002;
pub const GL_TRIANGLES: GLenum = 0x0004;
pub const GL_TRIANGLE_STRIP: GLenum = 0x0005;
pub const GL_TRIANGLE_FAN: GLenum = 0x0006;
pub const GL_QUADS: GLenum = 0x0007;
pub const GL_QUAD_STRIP: GLenum = 0x0008;
pub const GL_POLYGON: GLenum = 0x0009;
pub const GL_LINE_STIPPLE: GLenum = 0x0B24;
pub const GL_FRONT: GLenum = 0x0404;
pub const GL_BACK: GLenum = 0x0405;
pub const GL_POINT: GLenum = 0x1B00;
pub const GL_LINE: GLenum = 0x1B01;
pub const GL_FILL: GLenum = 0x1B02;
pub const GL_CCW: GLenum = 0x0901;
pub const GL_CW: GLenum = 0x0900;
pub const GL_FRONT_AND_BACK: GLenum = 0x0408;
pub const GL_CULL_FACE: GLenum = 0x0B44;
pub const GL_POLYGON_STIPPLE: GLenum = 0x0B42;
pub const GL_NORMALIZE: GLenum = 0x0BA1;
pub const GL_RESCALE_NORMAL: GLenum = 0x803A;
pub const GL_VERTEX_ARRAY: GLenum = 0x8074;
pub const GL_COLOR_ARRAY: GLenum = 0x8076;
pub const GL_INDEX_ARRAY: GLenum = 0x8077;
pub const GL_NORMAL_ARRAY: GLenum = 0x8075;
pub const GL_TEXTURE_COORD_ARRAY: GLenum = 0x8078;
pub const GL_EDGE_FLAG_ARRAY: GLenum = 0x8079;
pub const GL_BYTE: GLenum = 0x1400;
pub const GL_UNSIGNED_BYTE: GLenum = 0x1401;
pub const GL_SHORT: GLenum = 0x1402;
pub const GL_UNSIGNED_SHORT: GLenum = 0x1403;
pub const GL_INT: GLenum = 0x1404;
pub const GL_UNSIGNED_INT: GLenum = 0x1405;
pub const GL_FLOAT: GLenum = 0x1406;
pub const GL_DOUBLE: GLenum = 0x140A;
pub const GL_V2F: GLenum = 0x2A20;
pub const GL_V3F: GLenum = 0x2A21;
pub const GL_C4UB_V2F: GLenum = 0x2A22;
pub const GL_C4UB_V3F: GLenum = 0x2A23;
pub const GL_C3F_V3F: GLenum = 0x2A24;
pub const GL_N3F_V3F: GLenum = 0x2A25;
pub const GL_C4F_N3F_V3F: GLenum = 0x2A26;
pub const GL_T2F_V3F: GLenum = 0x2A27;
pub const GL_T4F_V4F: GLenum = 0x2A28;
pub const GL_T2F_C4UB_V3F: GLenum = 0x2A29;
pub const GL_T2F_C3F_V3F: GLenum = 0x2A2A;
pub const GL_T2F_N3F_V3F: GLenum = 0x2A2B;
pub const GL_T2F_C4F_N3F_V3F: GLenum = 0x2A2C;
pub const GL_T4F_C4F_N3F_V4F: GLenum = 0x2A2D;
pub const GL_ALL_ATTRIB_BITS: GLenum = 0x000FFFFF;
pub const GL_CURRENT_BIT: GLenum = 0x00000001;
pub const GL_ENABLE_BIT: GLenum = 0x00002000;
pub const GL_EVAL_BIT: GLenum = 0x00010000;
pub const GL_FOG_BIT: GLenum = 0x00000080;
pub const GL_HINT_BIT: GLenum = 0x00008000;
pub const GL_LIGHTING_BIT: GLenum = 0x00000040;
pub const GL_LINE_BIT: GLenum = 0x00000004;
pub const GL_LIST_BIT: GLenum = 0x00020000;
pub const GL_PIXEL_MODE_BIT: GLenum = 0x00000020;
pub const GL_POINT_BIT: GLenum = 0x00000002;
pub const GL_POLYGON_BIT: GLenum = 0x00000008;
pub const GL_POLYGON_STIPPLE_BIT: GLenum = 0x00000010;
pub const GL_SCISSOR_BIT: GLenum = 0x00080000;
pub const GL_TEXTURE_BIT: GLenum = 0x00040000;
pub const GL_TRANSFORM_BIT: GLenum = 0x00001000;
pub const GL_VIEWPORT_BIT: GLenum = 0x00000800;
pub const GL_CLIENT_PIXEL_STORE_BIT: GLenum = 0x00000001;
pub const GL_CLIENT_VERTEX_ARRAY_BIT: GLenum = 0x00000002;
pub const GL_ALL_CLIENT_ATTRIB_BITS: GLenum = 0xFFFFFFFF;
pub const GL_MODELVIEW: GLenum = 0x1700;
pub const GL_PROJECTION: GLenum = 0x1701;
pub const GL_TEXTURE: GLenum = 0x1702;
pub const GL_SMOOTH: GLenum = 0x1D01;
pub const GL_FLAT: GLenum = 0x1D00;
pub const GL_LIGHT0: GLenum = 0x4000;
pub const GL_LIGHT1: GLenum = 0x4001;
pub const GL_LIGHT2: GLenum = 0x4002;
pub const GL_LIGHT3: GLenum = 0x4003;
pub const GL_LIGHT4: GLenum = 0x4004;
pub const GL_LIGHT5: GLenum = 0x4005;
pub const GL_LIGHT6: GLenum = 0x4006;
pub const GL_LIGHT7: GLenum = 0x4007;
pub const GL_AMBIENT: GLenum = 0x1200;
pub const GL_DIFFUSE: GLenum = 0x1201;
pub const GL_AMBIENT_AND_DIFFUSE: GLenum = 0x1602;
pub const GL_SPECULAR: GLenum = 0x1202;
pub const GL_SHININESS: GLenum = 0x1601;
pub const GL_EMISSION: GLenum = 0x1600;
pub const GL_COLOR_INDEXES: GLenum = 0x1603;
pub const GL_POSITION: GLenum = 0x1203;
pub const GL_SPOT_DIRECTION: GLenum = 0x1204;
pub const GL_SPOT_EXPONENT: GLenum = 0x1205;
pub const GL_SPOT_CUTOFF: GLenum = 0x1206;
pub const GL_CONSTANT_ATTENUATION: GLenum = 0x1207;
pub const GL_LINEAR_ATTENUATION: GLenum = 0x1208;
pub const GL_QUADRATIC_ATTENUATION: GLenum = 0x1209;
pub const GL_LIGHT_MODEL_AMBIENT: GLenum = 0x0B53;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER: GLenum = 0x0B51;
pub const GL_LIGHT_MODEL_TWO_SIDE: GLenum = 0x0B52;
pub const GL_LIGHT_MODEL_COLOR_CONTROL: GLenum = 0x81F8;
pub const GL_FALSE: GLenum = 0x0;
pub const GL_TRUE: GLenum = 0x1;
pub const GL_SINGLE_COLOR: GLenum = 0x81F9;
pub const GL_ZERO: GLenum = 0x0;
pub const GL_ONE: GLenum = 0x1;
pub const GL_DST_COLOR: GLenum = 0x0306;
pub const GL_SRC_COLOR: GLenum = 0x0300;
pub const GL_ONE_MINUS_DST_COLOR: GLenum = 0x0307;
pub const GL_ONE_MINUS_SRC_COLOR: GLenum = 0x0301;
pub const GL_SRC_ALPHA: GLenum = 0x0302;
pub const GL_ONE_MINUS_SRC_ALPHA: GLenum = 0x0303;
pub const GL_SRC_ALPHA_SATURATE: GLenum = 0x0308;
pub const GL_CONSTANT_COLOR: GLenum = 0x8001;
pub const GL_ONE_MINUS_CONSTANT_COLOR: GLenum = 0x8002;
pub const GL_CONSTANT_ALPHA: GLenum = 0x8003;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: GLenum = 0x8004;
pub const GL_POINT_SMOOTH_HINT: GLenum = 0x0C51;
pub const GL_LINE_SMOOTH_HINT: GLenum = 0x0C52;
pub const GL_POLYGON_SMOOTH_HINT: GLenum = 0x0C53;
pub const GL_FOG_HINT: GLenum = 0x0C54;
pub const GL_PERSPECTIVE_CORRECTION_HINT: GLenum = 0x0C50;
pub const GL_EXP: GLenum = 0x0800;
pub const GL_EXP2: GLenum = 0x0801;
pub const GL_FOG_MODE: GLenum = 0x0B65;
pub const GL_LINEAR: GLenum = 0x2601;
pub const GL_FOG_DENSITY: GLenum = 0x0B62;
pub const GL_FOG_START: GLenum = 0x0B63;
pub const GL_FOG_END: GLenum = 0x0B64;
pub const GL_FOG_COLOR: GLenum = 0x0B66;
pub const GL_POLYGON_OFFSET_LINE: GLenum = 0x2A02;
pub const GL_POLYGON_OFFSET_FILL: GLenum = 0x8037;
pub const GL_POLYGON_OFFSET_POINT: GLenum = 0x2A01;
pub const GL_COLOR_INDEX: GLenum = 0x1900;
pub const GL_RGB: GLenum = 0x1907;
pub const GL_RGBA: GLenum = 0x1908;
pub const GL_BGR: GLenum = 0x80E0;
pub const GL_BGRA: GLenum = 0x80E1;
pub const GL_RED: GLenum = 0x1903;
pub const GL_GREEN: GLenum = 0x1904;
pub const GL_BLUE: GLenum = 0x1905;
pub const GL_ALPHA: GLenum = 0x1906;
pub const GL_LUMINANCE: GLenum = 0x1909;
pub const GL_LUMINANCE_ALPHA: GLenum = 0x190A;
pub const GL_STENCIL_INDEX: GLenum = 0x1901;
pub const GL_DEPTH_COMPONENT: GLenum = 0x1902;
pub const GL_BITMAP: GLenum = 0x1A00;
pub const GL_UNSIGNED_BYTE_3_3_2: GLenum = 0x8032;
pub const GL_UNSIGNED_BYTE_2_3_3_REV: GLenum = 0x8362;
pub const GL_UNSIGNED_SHORT_5_6_5: GLenum = 0x8363;
pub const GL_UNSIGNED_SHORT_5_6_5_REV: GLenum = 0x8364;
pub const GL_UNSIGNED_SHORT_4_4_4_4: GLenum = 0x8033;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: GLenum = 0x8365;
pub const GL_UNSIGNED_SHORT_5_5_5_1: GLenum = 0x8034;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: GLenum = 0x8366;
pub const GL_UNSIGNED_INT_8_8_8_8: GLenum = 0x8035;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: GLenum = 0x8367;
pub const GL_UNSIGNED_INT_10_10_10_2: GLenum = 0x8036;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: GLenum = 0x8368;
pub const GL_UNPACK_SWAP_BYTES: GLenum = 0x0CF0;
pub const GL_PACK_SWAP_BYTES: GLenum = 0x0D00;
pub const GL_UNPACK_LSB_FIRST: GLenum = 0x0CF1;
pub const GL_PACK_LSB_FIRST: GLenum = 0x0D01;
pub const GL_UNPACK_ROW_LENGTH: GLenum = 0x0CF2;
pub const GL_PACK_ROW_LENGTH: GLenum = 0x0D02;
pub const GL_UNPACK_SKIP_ROWS: GLenum = 0x0CF3;
pub const GL_PACK_SKIP_ROWS: GLenum = 0x0D03;
pub const GL_UNPACK_SKIP_PIXELS: GLenum = 0x0CF4;
pub const GL_PACK_SKIP_PIXELS: GLenum = 0x0D04;
pub const GL_UNPACK_ALIGNMENT: GLenum = 0x0CF5;
pub const GL_PACK_ALIGNMENT: GLenum = 0x0D05;
pub const GL_UNPACK_IMAGE_HEIGHT: GLenum = 0x806E;
pub const GL_PACK_IMAGE_HEIGHT: GLenum = 0x806C;
pub const GL_UNPACK_SKIP_IMAGES: GLenum = 0x806D;
pub const GL_PACK_SKIP_IMAGES: GLenum = 0x806B;
pub const GL_MAP_COLOR: GLenum = 0x0D10;
pub const GL_MAP_STENCIL: GLenum = 0x0D11;
pub const GL_INDEX_SHIFT: GLenum = 0x0D12;
pub const GL_INDEX_OFFSET: GLenum = 0x0D13;
pub const GL_RED_SCALE: GLenum = 0x0D14;
pub const GL_GREEN_SCALE: GLenum = 0x0D18;
pub const GL_BLUE_SCALE: GLenum = 0x0D1A;
pub const GL_ALPHA_SCALE: GLenum = 0x0D1C;
pub const GL_DEPTH_SCALE: GLenum = 0x0D1E;
pub const GL_RED_BIAS: GLenum = 0x0D15;
pub const GL_GREEN_BIAS: GLenum = 0x0D19;
pub const GL_BLUE_BIAS: GLenum = 0x0D1B;
pub const GL_ALPHA_BIAS: GLenum = 0x0D1D;
pub const GL_DEPTH_BIAS: GLenum = 0x0D1F;
pub const GL_POST_CONVOLUTION_RED_SCALE: GLenum = 0x801C;
pub const GL_POST_CONVOLUTION_GREEN_SCALE: GLenum = 0x801D;
pub const GL_POST_CONVOLUTION_BLUE_SCALE: GLenum = 0x801E;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE: GLenum = 0x801F;
pub const GL_POST_CONVOLUTION_RED_BIAS: GLenum = 0x8020;
pub const GL_POST_CONVOLUTION_GREEN_BIAS: GLenum = 0x8021;
pub const GL_POST_CONVOLUTION_BLUE_BIAS: GLenum = 0x8022;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS: GLenum = 0x8023;
pub const GL_POST_COLOR_MATRIX_RED_SCALE: GLenum = 0x80B4;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE: GLenum = 0x80B5;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE: GLenum = 0x80B6;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE: GLenum = 0x80B7;
pub const GL_POST_COLOR_MATRIX_RED_BIAS: GLenum = 0x80B8;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS: GLenum = 0x80B9;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS: GLenum = 0x80BA;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS: GLenum = 0x80BB;
pub const GL_PIXEL_MAP_I_TO_I: GLenum = 0x0C70;
pub const GL_PIXEL_MAP_S_TO_S: GLenum = 0x0C71;
pub const GL_PIXEL_MAP_I_TO_R: GLenum = 0x0C72;
pub const GL_PIXEL_MAP_I_TO_G: GLenum = 0x0C73;
pub const GL_PIXEL_MAP_I_TO_B: GLenum = 0x0C74;
pub const GL_PIXEL_MAP_I_TO_A: GLenum = 0x0C75;
pub const GL_PIXEL_MAP_R_TO_R: GLenum = 0x0C76;
pub const GL_PIXEL_MAP_G_TO_G: GLenum = 0x0C77;
pub const GL_PIXEL_MAP_B_TO_B: GLenum = 0x0C78;
pub const GL_PIXEL_MAP_A_TO_A: GLenum = 0x0C79;
pub const GL_TEXTURE_1D: GLenum = 0x0DE0;
pub const GL_TEXTURE_2D: GLenum = 0x0DE1;
pub const GL_TEXTURE_3D: GLenum = 0x806F;
pub const GL_PROXY_TEXTURE_2D: GLenum = 0x8064;
pub const GL_ALPHA4: GLenum = 0x803B;
pub const GL_ALPHA8: GLenum = 0x803C;
pub const GL_ALPHA12: GLenum = 0x803D;
pub const GL_ALPHA16: GLenum = 0x803E;
pub const GL_LUMINANCE4: GLenum = 0x803F;
pub const GL_LUMINANCE8: GLenum = 0x8040;
pub const GL_LUMINANCE12: GLenum = 0x8041;
pub const GL_LUMINANCE16: GLenum = 0x8042;
pub const GL_LUMINANCE4_ALPHA4: GLenum = 0x8043;
pub const GL_LUMINANCE6_ALPHA2: GLenum = 0x8044;
pub const GL_LUMINANCE8_ALPHA8: GLenum = 0x8045;
pub const GL_LUMINANCE12_ALPHA4: GLenum = 0x8046;
pub const GL_LUMINANCE12_ALPHA12: GLenum = 0x8047;
pub const GL_LUMINANCE16_ALPHA16: GLenum = 0x8048;
pub const GL_INTENSITY: GLenum = 0x8049;
pub const GL_INTENSITY4: GLenum = 0x804A;
pub const GL_INTENSITY8: GLenum = 0x804B;
pub const GL_INTENSITY12: GLenum = 0x804C;
pub const GL_INTENSITY16: GLenum = 0x804D;
pub const GL_R3_G3_B2: GLenum = 0x2A10;
pub const GL_RGB4: GLenum = 0x804F;
pub const GL_RGB5: GLenum = 0x8050;
pub const GL_RGB8: GLenum = 0x8051;
pub const GL_RGB10: GLenum = 0x8052;
pub const GL_RGB12: GLenum = 0x8053;
pub const GL_RGB16: GLenum = 0x8054;
pub const GL_RGBA2: GLenum = 0x8055;
pub const GL_RGBA4: GLenum = 0x8056;
pub const GL_RGB5_A1: GLenum = 0x8057;
pub const GL_RGBA8: GLenum = 0x8058;
pub const GL_RGB10_A2: GLenum = 0x8059;
pub const GL_RGBA12: GLenum = 0x805A;
pub const GL_RGBA16: GLenum = 0x805B;
pub const GL_MAX_TEXTURE_SIZE: GLenum = 0x0D33;
pub const GL_TEXTURE_BASE_LEVEL: GLenum = 0x813C;
pub const GL_TEXTURE_MAX_LEVEL: GLenum = 0x813D;
pub const GL_TEXTURE_MAX_LOD: GLenum = 0x813B;
pub const GL_TEXTURE_MIN_LOD: GLenum = 0x813A;
pub const GL_TEXTURE_ENV_MODE: GLenum = 0x2200;
pub const GL_TEXTURE_ENV_COLOR: GLenum = 0x2201;
pub const GL_DECAL: GLenum = 0x2101;
pub const GL_REPLACE: GLenum = 0x1E01;
pub const GL_MODULATE: GLenum = 0x2100;
pub const GL_BLEND: GLenum = 0x0BE2;
pub const GL_TEXTURE_WRAP_S: GLenum = 0x2802;
pub const GL_TEXTURE_WRAP_T: GLenum = 0x2803;
pub const GL_TEXTURE_WRAP_R: GLenum = 0x8072;
pub const GL_TEXTURE_MAG_FILTER: GLenum = 0x2800;
pub const GL_TEXTURE_MIN_FILTER: GLenum = 0x2801;
pub const GL_TEXTURE_BORDER_COLOR: GLenum = 0x1004;
pub const GL_TEXTURE_PRIORITY: GLenum = 0x8066;
pub const GL_CLAMP: GLenum = 0x2900;
pub const GL_CLAMP_TO_EDGE: GLenum = 0x812F;
pub const GL_REPEAT: GLenum = 0x2901;
pub const GL_NEAREST: GLenum = 0x2600;
pub const GL_NEAREST_MIPMAP_NEAREST: GLenum = 0x2700;
pub const GL_NEAREST_MIPMAP_LINEAR: GLenum = 0x2702;
pub const GL_LINEAR_MIPMAP_NEAREST: GLenum = 0x2701;
pub const GL_LINEAR_MIPMAP_LINEAR: GLenum = 0x2703;
pub const GL_S: GLenum = 0x2000;
pub const GL_T: GLenum = 0x2001;
pub const GL_R: GLenum = 0x2002;
pub const GL_Q: GLenum = 0x2003;
pub const GL_TEXTURE_GEN_MODE: GLenum = 0x2500;
pub const GL_OBJECT_PLANE: GLenum = 0x2501;
pub const GL_EYE_PLANE: GLenum = 0x2502;
pub const GL_EYE_LINEAR: GLenum = 0x2400;
pub const GL_OBJECT_LINEAR: GLenum = 0x2401;
pub const GL_SPHERE_MAP: GLenum = 0x2402;
pub const GL_LEFT: GLenum = 0x0406;
pub const GL_RIGHT: GLenum = 0x0407;
pub const GL_FRONT_LEFT: GLenum = 0x0400;
pub const GL_FRONT_RIGHT: GLenum = 0x0401;
pub const GL_BACK_LEFT: GLenum = 0x0402;
pub const GL_BACK_RIGHT: GLenum = 0x0403;
pub const GL_NONE: GLenum = 0x0;
pub const GL_SCISSOR_TEST: GLenum = 0x0C11;
pub const GL_NEVER: GLenum = 0x0200;
pub const GL_ALWAYS: GLenum = 0x0207;
pub const GL_LESS: GLenum = 0x0201;
pub const GL_LEQUAL: GLenum = 0x0203;
pub const GL_EQUAL: GLenum = 0x0202;
pub const GL_GEQUAL: GLenum = 0x0206;
pub const GL_GREATER: GLenum = 0x0204;
pub const GL_NOTEQUAL: GLenum = 0x0205;
pub const GL_KEEP: GLenum = 0x1E00;
pub const GL_INCR: GLenum = 0x1E02;
pub const GL_DECR: GLenum = 0x1E03;
pub const GL_INVERT: GLenum = 0x150A;
pub const GL_CLEAR: GLenum = 0x1500;
pub const GL_COPY: GLenum = 0x1503;
pub const GL_NOOP: GLenum = 0x1505;
pub const GL_SET: GLenum = 0x150F;
pub const GL_COPY_INVERTED: GLenum = 0x150C;
pub const GL_AND_REVERSE: GLenum = 0x1502;
pub const GL_OR_REVERSE: GLenum = 0x150B;
pub const GL_AND: GLenum = 0x1501;
pub const GL_OR: GLenum = 0x1507;
pub const GL_NAND: GLenum = 0x150E;
pub const GL_NOR: GLenum = 0x1508;
pub const GL_XOR: GLenum = 0x1506;
pub const GL_EQUIV: GLenum = 0x1509;
pub const GL_AND_INVERTED: GLenum = 0x1504;
pub const GL_OR_INVERTED: GLenum = 0x150D;
pub const GL_LOAD: GLenum = 0x0101;
pub const GL_RETURN: GLenum = 0x0102;
pub const GL_ADD: GLenum = 0x0104;
pub const GL_MULT: GLenum = 0x0103;
pub const GL_ACCUM: GLenum = 0x0100;
pub const GL_MAP1_VERTEX_3: GLenum = 0x0D97;
pub const GL_MAP1_VERTEX_4: GLenum = 0x0D98;
pub const GL_MAP1_INDEX: GLenum = 0x0D91;
pub const GL_MAP1_COLOR_4: GLenum = 0x0D90;
pub const GL_MAP1_NORMAL: GLenum = 0x0D92;
pub const GL_MAP1_TEXTURE_COORD_1: GLenum = 0x0D93;
pub const GL_MAP1_TEXTURE_COORD_2: GLenum = 0x0D94;
pub const GL_MAP1_TEXTURE_COORD_3: GLenum = 0x0D95;
pub const GL_MAP1_TEXTURE_COORD_4: GLenum = 0x0D96;
pub const GL_MAP2_VERTEX_3: GLenum = 0x0DB7;
pub const GL_MAP2_VERTEX_4: GLenum = 0x0DB8;
pub const GL_MAP2_INDEX: GLenum = 0x0DB1;
pub const GL_MAP2_COLOR_4: GLenum = 0x0DB0;
pub const GL_MAP2_NORMAL: GLenum = 0x0DB2;
pub const GL_MAP2_TEXTURE_COORD_1: GLenum = 0x0DB3;
pub const GL_MAP2_TEXTURE_COORD_2: GLenum = 0x0DB4;
pub const GL_MAP2_TEXTURE_COORD_3: GLenum = 0x0DB5;
pub const GL_MAP2_TEXTURE_COORD_4: GLenum = 0x0DB6;
pub const GL_AUTO_NORMAL: GLenum = 0x0D80;
pub const GL_LIGHTING: GLenum = 0x0B50;
pub const GL_DEPTH_TEST: GLenum = 0x0B71;
pub const GL_COLOR_TABLE: GLenum = 0x80D0;
pub const GL_POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D1;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D2;
pub const GL_PROXY_COLOR_TABLE: GLenum = 0x80D3;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D4;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D5;
pub const GL_CONVOLUTION_1D: GLenum = 0x8010;
pub const GL_CONVOLUTION_2D: GLenum = 0x8011;
pub const GL_SEPARABLE_2D: GLenum = 0x8012;
pub const GL_CONVOLUTION_BORDER_MODE: GLenum = 0x8013;
pub const GL_CONVOLUTION_FILTER_SCALE: GLenum = 0x8014;
pub const GL_CONVOLUTION_FILTER_BIAS: GLenum = 0x8015;
pub const GL_REDUCE: GLenum = 0x8016;
pub const GL_CONSTANT_BORDER: GLenum = 0x8151;
pub const GL_REPLICATE_BORDER: GLenum = 0x8153;
pub const GL_HISTOGRAM: GLenum = 0x8024;
pub const GL_PROXY_HISTOGRAM: GLenum = 0x8025;
pub const GL_MINMAX: GLenum = 0x802E;
pub const GL_MIN: GLenum = 0x8007;
pub const GL_MAX: GLenum = 0x8008;
pub const GL_FUNC_ADD: GLenum = 0x8006;
pub const GL_FUNC_SUBTRACT: GLenum = 0x800A;
pub const GL_FUNC_REVERSE_SUBTRACT: GLenum = 0x800B;
pub const GL_COLOR_TABLE_SCALE: GLenum = 0x80D6;
pub const GL_READ_BUFFER: GLenum = 0x0C02;

use core::libc::*;
pub type ptrdiff_t = c_long;
pub type GLenum = c_uint;
pub type GLboolean = c_uchar;
pub type GLbitfield = c_uint;
pub type GLvoid = c_void;
pub type GLbyte = c_schar;
pub type GLshort = c_short;
pub type GLint = c_int;
pub type GLubyte = c_uchar;
pub type GLushort = c_ushort;
pub type GLuint = c_uint;
pub type GLsizei = c_int;
pub type GLfloat = c_float;
pub type GLclampf = c_float;
pub type GLdouble = c_double;
pub type GLclampd = c_double;
pub type PFNGLDRAWRANGEELEMENTSPROC = *u8;
pub type PFNGLTEXIMAGE3DPROC = *u8;
pub type PFNGLTEXSUBIMAGE3DPROC = *u8;
pub type PFNGLCOPYTEXSUBIMAGE3DPROC = *u8;
pub type PFNGLBLENDCOLORPROC = *u8;
pub type PFNGLBLENDEQUATIONPROC = *u8;
pub type PFNGLACTIVETEXTUREPROC = *u8;
pub type PFNGLSAMPLECOVERAGEPROC = *u8;
pub type PFNGLCOMPRESSEDTEXIMAGE3DPROC = *u8;
pub type PFNGLCOMPRESSEDTEXIMAGE2DPROC = *u8;
pub type PFNGLCOMPRESSEDTEXIMAGE1DPROC = *u8;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = *u8;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = *u8;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = *u8;
pub type PFNGLGETCOMPRESSEDTEXIMAGEPROC = *u8;
pub type PFNGLACTIVETEXTUREARBPROC = *u8;
pub type PFNGLCLIENTACTIVETEXTUREARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1DARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1DVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1FARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1FVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1IARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1IVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1SARBPROC = *u8;
pub type PFNGLMULTITEXCOORD1SVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2DARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2DVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2FARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2FVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2IARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2IVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2SARBPROC = *u8;
pub type PFNGLMULTITEXCOORD2SVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3DARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3DVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3FARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3FVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3IARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3IVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3SARBPROC = *u8;
pub type PFNGLMULTITEXCOORD3SVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4DARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4DVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4FARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4FVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4IARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4IVARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4SARBPROC = *u8;
pub type PFNGLMULTITEXCOORD4SVARBPROC = *u8;
pub type GLprogramcallbackMESA = *u8;
pub type PFNGLBLENDEQUATIONSEPARATEATIPROC = *u8;
pub type GLeglImageOES = *c_void;
pub type PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = *u8;
pub type PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = *u8;
pub type Struct_GLUnurbs = c_void;
pub type GLUnurbs = Struct_GLUnurbs;
pub type Struct_GLUquadric = c_void;
pub type GLUquadric = Struct_GLUquadric;
pub type Struct_GLUtesselator = c_void;
pub type GLUtesselator = Struct_GLUtesselator;
pub type GLUnurbsObj = GLUnurbs;
pub type GLUquadricObj = GLUquadric;
pub type GLUtesselatorObj = GLUtesselator;
pub type GLUtriangulatorObj = GLUtesselator;
pub type _GLUfuncptr = *u8;
pub type GLchar = c_schar;
pub type GLintptr = ptrdiff_t;
pub type GLsizeiptr = ptrdiff_t;
pub type GLintptrARB = ptrdiff_t;
pub type GLsizeiptrARB = ptrdiff_t;
pub type GLcharARB = c_schar;
pub type GLhandleARB = c_uint;
pub type GLhalfARB = c_ushort;
pub type GLhalfNV = c_ushort;
pub type PFNGLBLENDFUNCSEPARATEPROC = *u8;
pub type PFNGLFOGCOORDFPROC = *u8;
pub type PFNGLFOGCOORDFVPROC = *u8;
pub type PFNGLFOGCOORDDPROC = *u8;
pub type PFNGLFOGCOORDDVPROC = *u8;
pub type PFNGLFOGCOORDPOINTERPROC = *u8;
pub type PFNGLMULTIDRAWARRAYSPROC = *u8;
pub type PFNGLMULTIDRAWELEMENTSPROC = *u8;
pub type PFNGLPOINTPARAMETERFPROC = *u8;
pub type PFNGLPOINTPARAMETERFVPROC = *u8;
pub type PFNGLPOINTPARAMETERIPROC = *u8;
pub type PFNGLPOINTPARAMETERIVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3BPROC = *u8;
pub type PFNGLSECONDARYCOLOR3BVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3DPROC = *u8;
pub type PFNGLSECONDARYCOLOR3DVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3FPROC = *u8;
pub type PFNGLSECONDARYCOLOR3FVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3IPROC = *u8;
pub type PFNGLSECONDARYCOLOR3IVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3SPROC = *u8;
pub type PFNGLSECONDARYCOLOR3SVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UBPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UBVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UIPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UIVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3USPROC = *u8;
pub type PFNGLSECONDARYCOLOR3USVPROC = *u8;
pub type PFNGLSECONDARYCOLORPOINTERPROC = *u8;
pub type PFNGLWINDOWPOS2DPROC = *u8;
pub type PFNGLWINDOWPOS2DVPROC = *u8;
pub type PFNGLWINDOWPOS2FPROC = *u8;
pub type PFNGLWINDOWPOS2FVPROC = *u8;
pub type PFNGLWINDOWPOS2IPROC = *u8;
pub type PFNGLWINDOWPOS2IVPROC = *u8;
pub type PFNGLWINDOWPOS2SPROC = *u8;
pub type PFNGLWINDOWPOS2SVPROC = *u8;
pub type PFNGLWINDOWPOS3DPROC = *u8;
pub type PFNGLWINDOWPOS3DVPROC = *u8;
pub type PFNGLWINDOWPOS3FPROC = *u8;
pub type PFNGLWINDOWPOS3FVPROC = *u8;
pub type PFNGLWINDOWPOS3IPROC = *u8;
pub type PFNGLWINDOWPOS3IVPROC = *u8;
pub type PFNGLWINDOWPOS3SPROC = *u8;
pub type PFNGLWINDOWPOS3SVPROC = *u8;
pub type PFNGLGENQUERIESPROC = *u8;
pub type PFNGLDELETEQUERIESPROC = *u8;
pub type PFNGLISQUERYPROC = *u8;
pub type PFNGLBEGINQUERYPROC = *u8;
pub type PFNGLENDQUERYPROC = *u8;
pub type PFNGLGETQUERYIVPROC = *u8;
pub type PFNGLGETQUERYOBJECTIVPROC = *u8;
pub type PFNGLGETQUERYOBJECTUIVPROC = *u8;
pub type PFNGLBINDBUFFERPROC = *u8;
pub type PFNGLDELETEBUFFERSPROC = *u8;
pub type PFNGLGENBUFFERSPROC = *u8;
pub type PFNGLISBUFFERPROC = *u8;
pub type PFNGLBUFFERDATAPROC = *u8;
pub type PFNGLBUFFERSUBDATAPROC = *u8;
pub type PFNGLGETBUFFERSUBDATAPROC = *u8;
pub type PFNGLMAPBUFFERPROC = *u8;
pub type PFNGLUNMAPBUFFERPROC = *u8;
pub type PFNGLGETBUFFERPARAMETERIVPROC = *u8;
pub type PFNGLGETBUFFERPOINTERVPROC = *u8;
pub type PFNGLBLENDEQUATIONSEPARATEPROC = *u8;
pub type PFNGLDRAWBUFFERSPROC = *u8;
pub type PFNGLSTENCILOPSEPARATEPROC = *u8;
pub type PFNGLSTENCILFUNCSEPARATEPROC = *u8;
pub type PFNGLSTENCILMASKSEPARATEPROC = *u8;
pub type PFNGLATTACHSHADERPROC = *u8;
pub type PFNGLBINDATTRIBLOCATIONPROC = *u8;
pub type PFNGLCOMPILESHADERPROC = *u8;
pub type PFNGLCREATEPROGRAMPROC = *u8;
pub type PFNGLCREATESHADERPROC = *u8;
pub type PFNGLDELETEPROGRAMPROC = *u8;
pub type PFNGLDELETESHADERPROC = *u8;
pub type PFNGLDETACHSHADERPROC = *u8;
pub type PFNGLDISABLEVERTEXATTRIBARRAYPROC = *u8;
pub type PFNGLENABLEVERTEXATTRIBARRAYPROC = *u8;
pub type PFNGLGETACTIVEATTRIBPROC = *u8;
pub type PFNGLGETACTIVEUNIFORMPROC = *u8;
pub type PFNGLGETATTACHEDSHADERSPROC = *u8;
pub type PFNGLGETATTRIBLOCATIONPROC = *u8;
pub type PFNGLGETPROGRAMIVPROC = *u8;
pub type PFNGLGETPROGRAMINFOLOGPROC = *u8;
pub type PFNGLGETSHADERIVPROC = *u8;
pub type PFNGLGETSHADERINFOLOGPROC = *u8;
pub type PFNGLGETSHADERSOURCEPROC = *u8;
pub type PFNGLGETUNIFORMLOCATIONPROC = *u8;
pub type PFNGLGETUNIFORMFVPROC = *u8;
pub type PFNGLGETUNIFORMIVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBDVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBFVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBIVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBPOINTERVPROC = *u8;
pub type PFNGLISPROGRAMPROC = *u8;
pub type PFNGLISSHADERPROC = *u8;
pub type PFNGLLINKPROGRAMPROC = *u8;
pub type PFNGLSHADERSOURCEPROC = *u8;
pub type PFNGLUSEPROGRAMPROC = *u8;
pub type PFNGLUNIFORM1FPROC = *u8;
pub type PFNGLUNIFORM2FPROC = *u8;
pub type PFNGLUNIFORM3FPROC = *u8;
pub type PFNGLUNIFORM4FPROC = *u8;
pub type PFNGLUNIFORM1IPROC = *u8;
pub type PFNGLUNIFORM2IPROC = *u8;
pub type PFNGLUNIFORM3IPROC = *u8;
pub type PFNGLUNIFORM4IPROC = *u8;
pub type PFNGLUNIFORM1FVPROC = *u8;
pub type PFNGLUNIFORM2FVPROC = *u8;
pub type PFNGLUNIFORM3FVPROC = *u8;
pub type PFNGLUNIFORM4FVPROC = *u8;
pub type PFNGLUNIFORM1IVPROC = *u8;
pub type PFNGLUNIFORM2IVPROC = *u8;
pub type PFNGLUNIFORM3IVPROC = *u8;
pub type PFNGLUNIFORM4IVPROC = *u8;
pub type PFNGLUNIFORMMATRIX2FVPROC = *u8;
pub type PFNGLUNIFORMMATRIX3FVPROC = *u8;
pub type PFNGLUNIFORMMATRIX4FVPROC = *u8;
pub type PFNGLVALIDATEPROGRAMPROC = *u8;
pub type PFNGLVERTEXATTRIB1DPROC = *u8;
pub type PFNGLVERTEXATTRIB1DVPROC = *u8;
pub type PFNGLVERTEXATTRIB1FPROC = *u8;
pub type PFNGLVERTEXATTRIB1FVPROC = *u8;
pub type PFNGLVERTEXATTRIB1SPROC = *u8;
pub type PFNGLVERTEXATTRIB1SVPROC = *u8;
pub type PFNGLVERTEXATTRIB2DPROC = *u8;
pub type PFNGLVERTEXATTRIB2DVPROC = *u8;
pub type PFNGLVERTEXATTRIB2FPROC = *u8;
pub type PFNGLVERTEXATTRIB2FVPROC = *u8;
pub type PFNGLVERTEXATTRIB2SPROC = *u8;
pub type PFNGLVERTEXATTRIB2SVPROC = *u8;
pub type PFNGLVERTEXATTRIB3DPROC = *u8;
pub type PFNGLVERTEXATTRIB3DVPROC = *u8;
pub type PFNGLVERTEXATTRIB3FPROC = *u8;
pub type PFNGLVERTEXATTRIB3FVPROC = *u8;
pub type PFNGLVERTEXATTRIB3SPROC = *u8;
pub type PFNGLVERTEXATTRIB3SVPROC = *u8;
pub type PFNGLVERTEXATTRIB4NBVPROC = *u8;
pub type PFNGLVERTEXATTRIB4NIVPROC = *u8;
pub type PFNGLVERTEXATTRIB4NSVPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUBVPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUIVPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUSVPROC = *u8;
pub type PFNGLVERTEXATTRIB4BVPROC = *u8;
pub type PFNGLVERTEXATTRIB4DPROC = *u8;
pub type PFNGLVERTEXATTRIB4DVPROC = *u8;
pub type PFNGLVERTEXATTRIB4FPROC = *u8;
pub type PFNGLVERTEXATTRIB4FVPROC = *u8;
pub type PFNGLVERTEXATTRIB4IVPROC = *u8;
pub type PFNGLVERTEXATTRIB4SPROC = *u8;
pub type PFNGLVERTEXATTRIB4SVPROC = *u8;
pub type PFNGLVERTEXATTRIB4UBVPROC = *u8;
pub type PFNGLVERTEXATTRIB4UIVPROC = *u8;
pub type PFNGLVERTEXATTRIB4USVPROC = *u8;
pub type PFNGLVERTEXATTRIBPOINTERPROC = *u8;
pub type PFNGLLOADTRANSPOSEMATRIXFARBPROC = *u8;
pub type PFNGLLOADTRANSPOSEMATRIXDARBPROC = *u8;
pub type PFNGLMULTTRANSPOSEMATRIXFARBPROC = *u8;
pub type PFNGLMULTTRANSPOSEMATRIXDARBPROC = *u8;
pub type PFNGLSAMPLECOVERAGEARBPROC = *u8;
pub type PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = *u8;
pub type PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = *u8;
pub type PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = *u8;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = *u8;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = *u8;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = *u8;
pub type PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = *u8;
pub type PFNGLPOINTPARAMETERFARBPROC = *u8;
pub type PFNGLPOINTPARAMETERFVARBPROC = *u8;
pub type PFNGLWEIGHTBVARBPROC = *u8;
pub type PFNGLWEIGHTSVARBPROC = *u8;
pub type PFNGLWEIGHTIVARBPROC = *u8;
pub type PFNGLWEIGHTFVARBPROC = *u8;
pub type PFNGLWEIGHTDVARBPROC = *u8;
pub type PFNGLWEIGHTUBVARBPROC = *u8;
pub type PFNGLWEIGHTUSVARBPROC = *u8;
pub type PFNGLWEIGHTUIVARBPROC = *u8;
pub type PFNGLWEIGHTPOINTERARBPROC = *u8;
pub type PFNGLVERTEXBLENDARBPROC = *u8;
pub type PFNGLCURRENTPALETTEMATRIXARBPROC = *u8;
pub type PFNGLMATRIXINDEXUBVARBPROC = *u8;
pub type PFNGLMATRIXINDEXUSVARBPROC = *u8;
pub type PFNGLMATRIXINDEXUIVARBPROC = *u8;
pub type PFNGLMATRIXINDEXPOINTERARBPROC = *u8;
pub type PFNGLWINDOWPOS2DARBPROC = *u8;
pub type PFNGLWINDOWPOS2DVARBPROC = *u8;
pub type PFNGLWINDOWPOS2FARBPROC = *u8;
pub type PFNGLWINDOWPOS2FVARBPROC = *u8;
pub type PFNGLWINDOWPOS2IARBPROC = *u8;
pub type PFNGLWINDOWPOS2IVARBPROC = *u8;
pub type PFNGLWINDOWPOS2SARBPROC = *u8;
pub type PFNGLWINDOWPOS2SVARBPROC = *u8;
pub type PFNGLWINDOWPOS3DARBPROC = *u8;
pub type PFNGLWINDOWPOS3DVARBPROC = *u8;
pub type PFNGLWINDOWPOS3FARBPROC = *u8;
pub type PFNGLWINDOWPOS3FVARBPROC = *u8;
pub type PFNGLWINDOWPOS3IARBPROC = *u8;
pub type PFNGLWINDOWPOS3IVARBPROC = *u8;
pub type PFNGLWINDOWPOS3SARBPROC = *u8;
pub type PFNGLWINDOWPOS3SVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB1DARBPROC = *u8;
pub type PFNGLVERTEXATTRIB1DVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB1FARBPROC = *u8;
pub type PFNGLVERTEXATTRIB1FVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB1SARBPROC = *u8;
pub type PFNGLVERTEXATTRIB1SVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB2DARBPROC = *u8;
pub type PFNGLVERTEXATTRIB2DVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB2FARBPROC = *u8;
pub type PFNGLVERTEXATTRIB2FVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB2SARBPROC = *u8;
pub type PFNGLVERTEXATTRIB2SVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB3DARBPROC = *u8;
pub type PFNGLVERTEXATTRIB3DVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB3FARBPROC = *u8;
pub type PFNGLVERTEXATTRIB3FVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB3SARBPROC = *u8;
pub type PFNGLVERTEXATTRIB3SVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NBVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NIVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NSVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUBARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUBVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUIVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4NUSVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4BVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4DARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4DVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4FARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4FVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4IVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4SARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4SVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4UBVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4UIVARBPROC = *u8;
pub type PFNGLVERTEXATTRIB4USVARBPROC = *u8;
pub type PFNGLVERTEXATTRIBPOINTERARBPROC = *u8;
pub type PFNGLENABLEVERTEXATTRIBARRAYARBPROC = *u8;
pub type PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = *u8;
pub type PFNGLPROGRAMSTRINGARBPROC = *u8;
pub type PFNGLBINDPROGRAMARBPROC = *u8;
pub type PFNGLDELETEPROGRAMSARBPROC = *u8;
pub type PFNGLGENPROGRAMSARBPROC = *u8;
pub type PFNGLPROGRAMENVPARAMETER4DARBPROC = *u8;
pub type PFNGLPROGRAMENVPARAMETER4DVARBPROC = *u8;
pub type PFNGLPROGRAMENVPARAMETER4FARBPROC = *u8;
pub type PFNGLPROGRAMENVPARAMETER4FVARBPROC = *u8;
pub type PFNGLPROGRAMLOCALPARAMETER4DARBPROC = *u8;
pub type PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = *u8;
pub type PFNGLPROGRAMLOCALPARAMETER4FARBPROC = *u8;
pub type PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = *u8;
pub type PFNGLGETPROGRAMENVPARAMETERDVARBPROC = *u8;
pub type PFNGLGETPROGRAMENVPARAMETERFVARBPROC = *u8;
pub type PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = *u8;
pub type PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = *u8;
pub type PFNGLGETPROGRAMIVARBPROC = *u8;
pub type PFNGLGETPROGRAMSTRINGARBPROC = *u8;
pub type PFNGLGETVERTEXATTRIBDVARBPROC = *u8;
pub type PFNGLGETVERTEXATTRIBFVARBPROC = *u8;
pub type PFNGLGETVERTEXATTRIBIVARBPROC = *u8;
pub type PFNGLGETVERTEXATTRIBPOINTERVARBPROC = *u8;
pub type PFNGLISPROGRAMARBPROC = *u8;
pub type PFNGLBINDBUFFERARBPROC = *u8;
pub type PFNGLDELETEBUFFERSARBPROC = *u8;
pub type PFNGLGENBUFFERSARBPROC = *u8;
pub type PFNGLISBUFFERARBPROC = *u8;
pub type PFNGLBUFFERDATAARBPROC = *u8;
pub type PFNGLBUFFERSUBDATAARBPROC = *u8;
pub type PFNGLGETBUFFERSUBDATAARBPROC = *u8;
pub type PFNGLMAPBUFFERARBPROC = *u8;
pub type PFNGLUNMAPBUFFERARBPROC = *u8;
pub type PFNGLGETBUFFERPARAMETERIVARBPROC = *u8;
pub type PFNGLGETBUFFERPOINTERVARBPROC = *u8;
pub type PFNGLGENQUERIESARBPROC = *u8;
pub type PFNGLDELETEQUERIESARBPROC = *u8;
pub type PFNGLISQUERYARBPROC = *u8;
pub type PFNGLBEGINQUERYARBPROC = *u8;
pub type PFNGLENDQUERYARBPROC = *u8;
pub type PFNGLGETQUERYIVARBPROC = *u8;
pub type PFNGLGETQUERYOBJECTIVARBPROC = *u8;
pub type PFNGLGETQUERYOBJECTUIVARBPROC = *u8;
pub type PFNGLDELETEOBJECTARBPROC = *u8;
pub type PFNGLGETHANDLEARBPROC = *u8;
pub type PFNGLDETACHOBJECTARBPROC = *u8;
pub type PFNGLCREATESHADEROBJECTARBPROC = *u8;
pub type PFNGLSHADERSOURCEARBPROC = *u8;
pub type PFNGLCOMPILESHADERARBPROC = *u8;
pub type PFNGLCREATEPROGRAMOBJECTARBPROC = *u8;
pub type PFNGLATTACHOBJECTARBPROC = *u8;
pub type PFNGLLINKPROGRAMARBPROC = *u8;
pub type PFNGLUSEPROGRAMOBJECTARBPROC = *u8;
pub type PFNGLVALIDATEPROGRAMARBPROC = *u8;
pub type PFNGLUNIFORM1FARBPROC = *u8;
pub type PFNGLUNIFORM2FARBPROC = *u8;
pub type PFNGLUNIFORM3FARBPROC = *u8;
pub type PFNGLUNIFORM4FARBPROC = *u8;
pub type PFNGLUNIFORM1IARBPROC = *u8;
pub type PFNGLUNIFORM2IARBPROC = *u8;
pub type PFNGLUNIFORM3IARBPROC = *u8;
pub type PFNGLUNIFORM4IARBPROC = *u8;
pub type PFNGLUNIFORM1FVARBPROC = *u8;
pub type PFNGLUNIFORM2FVARBPROC = *u8;
pub type PFNGLUNIFORM3FVARBPROC = *u8;
pub type PFNGLUNIFORM4FVARBPROC = *u8;
pub type PFNGLUNIFORM1IVARBPROC = *u8;
pub type PFNGLUNIFORM2IVARBPROC = *u8;
pub type PFNGLUNIFORM3IVARBPROC = *u8;
pub type PFNGLUNIFORM4IVARBPROC = *u8;
pub type PFNGLUNIFORMMATRIX2FVARBPROC = *u8;
pub type PFNGLUNIFORMMATRIX3FVARBPROC = *u8;
pub type PFNGLUNIFORMMATRIX4FVARBPROC = *u8;
pub type PFNGLGETOBJECTPARAMETERFVARBPROC = *u8;
pub type PFNGLGETOBJECTPARAMETERIVARBPROC = *u8;
pub type PFNGLGETINFOLOGARBPROC = *u8;
pub type PFNGLGETATTACHEDOBJECTSARBPROC = *u8;
pub type PFNGLGETUNIFORMLOCATIONARBPROC = *u8;
pub type PFNGLGETACTIVEUNIFORMARBPROC = *u8;
pub type PFNGLGETUNIFORMFVARBPROC = *u8;
pub type PFNGLGETUNIFORMIVARBPROC = *u8;
pub type PFNGLGETSHADERSOURCEARBPROC = *u8;
pub type PFNGLBINDATTRIBLOCATIONARBPROC = *u8;
pub type PFNGLGETACTIVEATTRIBARBPROC = *u8;
pub type PFNGLGETATTRIBLOCATIONARBPROC = *u8;
pub type PFNGLDRAWBUFFERSARBPROC = *u8;
pub type PFNGLCLAMPCOLORARBPROC = *u8;
pub type PFNGLBLENDCOLOREXTPROC = *u8;
pub type PFNGLPOLYGONOFFSETEXTPROC = *u8;
pub type PFNGLTEXIMAGE3DEXTPROC = *u8;
pub type PFNGLTEXSUBIMAGE3DEXTPROC = *u8;
pub type PFNGLGETTEXFILTERFUNCSGISPROC = *u8;
pub type PFNGLTEXFILTERFUNCSGISPROC = *u8;
pub type PFNGLTEXSUBIMAGE1DEXTPROC = *u8;
pub type PFNGLTEXSUBIMAGE2DEXTPROC = *u8;
pub type PFNGLCOPYTEXIMAGE1DEXTPROC = *u8;
pub type PFNGLCOPYTEXIMAGE2DEXTPROC = *u8;
pub type PFNGLCOPYTEXSUBIMAGE1DEXTPROC = *u8;
pub type PFNGLCOPYTEXSUBIMAGE2DEXTPROC = *u8;
pub type PFNGLCOPYTEXSUBIMAGE3DEXTPROC = *u8;
pub type PFNGLGETHISTOGRAMEXTPROC = *u8;
pub type PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = *u8;
pub type PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = *u8;
pub type PFNGLGETMINMAXEXTPROC = *u8;
pub type PFNGLGETMINMAXPARAMETERFVEXTPROC = *u8;
pub type PFNGLGETMINMAXPARAMETERIVEXTPROC = *u8;
pub type PFNGLHISTOGRAMEXTPROC = *u8;
pub type PFNGLMINMAXEXTPROC = *u8;
pub type PFNGLRESETHISTOGRAMEXTPROC = *u8;
pub type PFNGLRESETMINMAXEXTPROC = *u8;
pub type PFNGLCONVOLUTIONFILTER1DEXTPROC = *u8;
pub type PFNGLCONVOLUTIONFILTER2DEXTPROC = *u8;
pub type PFNGLCONVOLUTIONPARAMETERFEXTPROC = *u8;
pub type PFNGLCONVOLUTIONPARAMETERFVEXTPROC = *u8;
pub type PFNGLCONVOLUTIONPARAMETERIEXTPROC = *u8;
pub type PFNGLCONVOLUTIONPARAMETERIVEXTPROC = *u8;
pub type PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = *u8;
pub type PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = *u8;
pub type PFNGLGETCONVOLUTIONFILTEREXTPROC = *u8;
pub type PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = *u8;
pub type PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = *u8;
pub type PFNGLGETSEPARABLEFILTEREXTPROC = *u8;
pub type PFNGLSEPARABLEFILTER2DEXTPROC = *u8;
pub type PFNGLCOLORTABLESGIPROC = *u8;
pub type PFNGLCOLORTABLEPARAMETERFVSGIPROC = *u8;
pub type PFNGLCOLORTABLEPARAMETERIVSGIPROC = *u8;
pub type PFNGLCOPYCOLORTABLESGIPROC = *u8;
pub type PFNGLGETCOLORTABLESGIPROC = *u8;
pub type PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = *u8;
pub type PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = *u8;
pub type PFNGLPIXELTEXGENSGIXPROC = *u8;
pub type PFNGLPIXELTEXGENPARAMETERISGISPROC = *u8;
pub type PFNGLPIXELTEXGENPARAMETERIVSGISPROC = *u8;
pub type PFNGLPIXELTEXGENPARAMETERFSGISPROC = *u8;
pub type PFNGLPIXELTEXGENPARAMETERFVSGISPROC = *u8;
pub type PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = *u8;
pub type PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = *u8;
pub type PFNGLTEXIMAGE4DSGISPROC = *u8;
pub type PFNGLTEXSUBIMAGE4DSGISPROC = *u8;
pub type PFNGLARETEXTURESRESIDENTEXTPROC = *u8;
pub type PFNGLBINDTEXTUREEXTPROC = *u8;
pub type PFNGLDELETETEXTURESEXTPROC = *u8;
pub type PFNGLGENTEXTURESEXTPROC = *u8;
pub type PFNGLISTEXTUREEXTPROC = *u8;
pub type PFNGLPRIORITIZETEXTURESEXTPROC = *u8;
pub type PFNGLDETAILTEXFUNCSGISPROC = *u8;
pub type PFNGLGETDETAILTEXFUNCSGISPROC = *u8;
pub type PFNGLSHARPENTEXFUNCSGISPROC = *u8;
pub type PFNGLGETSHARPENTEXFUNCSGISPROC = *u8;
pub type PFNGLSAMPLEMASKSGISPROC = *u8;
pub type PFNGLSAMPLEPATTERNSGISPROC = *u8;
pub type PFNGLARRAYELEMENTEXTPROC = *u8;
pub type PFNGLCOLORPOINTEREXTPROC = *u8;
pub type PFNGLDRAWARRAYSEXTPROC = *u8;
pub type PFNGLEDGEFLAGPOINTEREXTPROC = *u8;
pub type PFNGLGETPOINTERVEXTPROC = *u8;
pub type PFNGLINDEXPOINTEREXTPROC = *u8;
pub type PFNGLNORMALPOINTEREXTPROC = *u8;
pub type PFNGLTEXCOORDPOINTEREXTPROC = *u8;
pub type PFNGLVERTEXPOINTEREXTPROC = *u8;
pub type PFNGLBLENDEQUATIONEXTPROC = *u8;
pub type PFNGLSPRITEPARAMETERFSGIXPROC = *u8;
pub type PFNGLSPRITEPARAMETERFVSGIXPROC = *u8;
pub type PFNGLSPRITEPARAMETERISGIXPROC = *u8;
pub type PFNGLSPRITEPARAMETERIVSGIXPROC = *u8;
pub type PFNGLPOINTPARAMETERFEXTPROC = *u8;
pub type PFNGLPOINTPARAMETERFVEXTPROC = *u8;
pub type PFNGLPOINTPARAMETERFSGISPROC = *u8;
pub type PFNGLPOINTPARAMETERFVSGISPROC = *u8;
pub type PFNGLGETINSTRUMENTSSGIXPROC = *u8;
pub type PFNGLINSTRUMENTSBUFFERSGIXPROC = *u8;
pub type PFNGLPOLLINSTRUMENTSSGIXPROC = *u8;
pub type PFNGLREADINSTRUMENTSSGIXPROC = *u8;
pub type PFNGLSTARTINSTRUMENTSSGIXPROC = *u8;
pub type PFNGLSTOPINSTRUMENTSSGIXPROC = *u8;
pub type PFNGLFRAMEZOOMSGIXPROC = *u8;
pub type PFNGLTAGSAMPLEBUFFERSGIXPROC = *u8;
pub type PFNGLDEFORMATIONMAP3DSGIXPROC = *u8;
pub type PFNGLDEFORMATIONMAP3FSGIXPROC = *u8;
pub type PFNGLDEFORMSGIXPROC = *u8;
pub type PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = *u8;
pub type PFNGLREFERENCEPLANESGIXPROC = *u8;
pub type PFNGLFLUSHRASTERSGIXPROC = *u8;
pub type PFNGLFOGFUNCSGISPROC = *u8;
pub type PFNGLGETFOGFUNCSGISPROC = *u8;
pub type PFNGLIMAGETRANSFORMPARAMETERIHPPROC = *u8;
pub type PFNGLIMAGETRANSFORMPARAMETERFHPPROC = *u8;
pub type PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = *u8;
pub type PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = *u8;
pub type PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = *u8;
pub type PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = *u8;
pub type PFNGLCOLORSUBTABLEEXTPROC = *u8;
pub type PFNGLCOPYCOLORSUBTABLEEXTPROC = *u8;
pub type PFNGLHINTPGIPROC = *u8;
pub type PFNGLCOLORTABLEEXTPROC = *u8;
pub type PFNGLGETCOLORTABLEEXTPROC = *u8;
pub type PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = *u8;
pub type PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = *u8;
pub type PFNGLGETLISTPARAMETERFVSGIXPROC = *u8;
pub type PFNGLGETLISTPARAMETERIVSGIXPROC = *u8;
pub type PFNGLLISTPARAMETERFSGIXPROC = *u8;
pub type PFNGLLISTPARAMETERFVSGIXPROC = *u8;
pub type PFNGLLISTPARAMETERISGIXPROC = *u8;
pub type PFNGLLISTPARAMETERIVSGIXPROC = *u8;
pub type PFNGLINDEXMATERIALEXTPROC = *u8;
pub type PFNGLINDEXFUNCEXTPROC = *u8;
pub type PFNGLLOCKARRAYSEXTPROC = *u8;
pub type PFNGLUNLOCKARRAYSEXTPROC = *u8;
pub type PFNGLCULLPARAMETERDVEXTPROC = *u8;
pub type PFNGLCULLPARAMETERFVEXTPROC = *u8;
pub type PFNGLFRAGMENTCOLORMATERIALSGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTFSGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTFVSGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTISGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTIVSGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTMODELFSGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTMODELISGIXPROC = *u8;
pub type PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = *u8;
pub type PFNGLFRAGMENTMATERIALFSGIXPROC = *u8;
pub type PFNGLFRAGMENTMATERIALFVSGIXPROC = *u8;
pub type PFNGLFRAGMENTMATERIALISGIXPROC = *u8;
pub type PFNGLFRAGMENTMATERIALIVSGIXPROC = *u8;
pub type PFNGLGETFRAGMENTLIGHTFVSGIXPROC = *u8;
pub type PFNGLGETFRAGMENTLIGHTIVSGIXPROC = *u8;
pub type PFNGLGETFRAGMENTMATERIALFVSGIXPROC = *u8;
pub type PFNGLGETFRAGMENTMATERIALIVSGIXPROC = *u8;
pub type PFNGLLIGHTENVISGIXPROC = *u8;
pub type PFNGLDRAWRANGEELEMENTSEXTPROC = *u8;
pub type PFNGLAPPLYTEXTUREEXTPROC = *u8;
pub type PFNGLTEXTURELIGHTEXTPROC = *u8;
pub type PFNGLTEXTUREMATERIALEXTPROC = *u8;
pub type PFNGLASYNCMARKERSGIXPROC = *u8;
pub type PFNGLFINISHASYNCSGIXPROC = *u8;
pub type PFNGLPOLLASYNCSGIXPROC = *u8;
pub type PFNGLGENASYNCMARKERSSGIXPROC = *u8;
pub type PFNGLDELETEASYNCMARKERSSGIXPROC = *u8;
pub type PFNGLISASYNCMARKERSGIXPROC = *u8;
pub type PFNGLVERTEXPOINTERVINTELPROC = *u8;
pub type PFNGLNORMALPOINTERVINTELPROC = *u8;
pub type PFNGLCOLORPOINTERVINTELPROC = *u8;
pub type PFNGLTEXCOORDPOINTERVINTELPROC = *u8;
pub type PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = *u8;
pub type PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = *u8;
pub type PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = *u8;
pub type PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3BEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3BVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3DEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3DVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3FEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3FVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3IEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3IVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3SEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3SVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UBEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UBVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UIEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3UIVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3USEXTPROC = *u8;
pub type PFNGLSECONDARYCOLOR3USVEXTPROC = *u8;
pub type PFNGLSECONDARYCOLORPOINTEREXTPROC = *u8;
pub type PFNGLTEXTURENORMALEXTPROC = *u8;
pub type PFNGLMULTIDRAWARRAYSEXTPROC = *u8;
pub type PFNGLMULTIDRAWELEMENTSEXTPROC = *u8;
pub type PFNGLFOGCOORDFEXTPROC = *u8;
pub type PFNGLFOGCOORDFVEXTPROC = *u8;
pub type PFNGLFOGCOORDDEXTPROC = *u8;
pub type PFNGLFOGCOORDDVEXTPROC = *u8;
pub type PFNGLFOGCOORDPOINTEREXTPROC = *u8;
pub type PFNGLTANGENT3BEXTPROC = *u8;
pub type PFNGLTANGENT3BVEXTPROC = *u8;
pub type PFNGLTANGENT3DEXTPROC = *u8;
pub type PFNGLTANGENT3DVEXTPROC = *u8;
pub type PFNGLTANGENT3FEXTPROC = *u8;
pub type PFNGLTANGENT3FVEXTPROC = *u8;
pub type PFNGLTANGENT3IEXTPROC = *u8;
pub type PFNGLTANGENT3IVEXTPROC = *u8;
pub type PFNGLTANGENT3SEXTPROC = *u8;
pub type PFNGLTANGENT3SVEXTPROC = *u8;
pub type PFNGLBINORMAL3BEXTPROC = *u8;
pub type PFNGLBINORMAL3BVEXTPROC = *u8;
pub type PFNGLBINORMAL3DEXTPROC = *u8;
pub type PFNGLBINORMAL3DVEXTPROC = *u8;
pub type PFNGLBINORMAL3FEXTPROC = *u8;
pub type PFNGLBINORMAL3FVEXTPROC = *u8;
pub type PFNGLBINORMAL3IEXTPROC = *u8;
pub type PFNGLBINORMAL3IVEXTPROC = *u8;
pub type PFNGLBINORMAL3SEXTPROC = *u8;
pub type PFNGLBINORMAL3SVEXTPROC = *u8;
pub type PFNGLTANGENTPOINTEREXTPROC = *u8;
pub type PFNGLBINORMALPOINTEREXTPROC = *u8;
pub type PFNGLFINISHTEXTURESUNXPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORBSUNPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORSSUNPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORISUNPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORFSUNPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORDSUNPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORUBSUNPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORUSSUNPROC = *u8;
pub type PFNGLGLOBALALPHAFACTORUISUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUISUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUSSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUBSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUIVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUSVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUBVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEPOINTERSUNPROC = *u8;
pub type PFNGLCOLOR4UBVERTEX2FSUNPROC = *u8;
pub type PFNGLCOLOR4UBVERTEX2FVSUNPROC = *u8;
pub type PFNGLCOLOR4UBVERTEX3FSUNPROC = *u8;
pub type PFNGLCOLOR4UBVERTEX3FVSUNPROC = *u8;
pub type PFNGLCOLOR3FVERTEX3FSUNPROC = *u8;
pub type PFNGLCOLOR3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLNORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLNORMAL3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLTEXCOORD2FVERTEX3FSUNPROC = *u8;
pub type PFNGLTEXCOORD2FVERTEX3FVSUNPROC = *u8;
pub type PFNGLTEXCOORD4FVERTEX4FSUNPROC = *u8;
pub type PFNGLTEXCOORD4FVERTEX4FVSUNPROC = *u8;
pub type PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = *u8;
pub type PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = *u8;
pub type PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = *u8;
pub type PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = *u8;
pub type PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = *u8;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC =
    *u8;
pub type PFNGLBLENDFUNCSEPARATEEXTPROC = *u8;
pub type PFNGLBLENDFUNCSEPARATEINGRPROC = *u8;
pub type PFNGLVERTEXWEIGHTFEXTPROC = *u8;
pub type PFNGLVERTEXWEIGHTFVEXTPROC = *u8;
pub type PFNGLVERTEXWEIGHTPOINTEREXTPROC = *u8;
pub type PFNGLFLUSHVERTEXARRAYRANGENVPROC = *u8;
pub type PFNGLVERTEXARRAYRANGENVPROC = *u8;
pub type PFNGLCOMBINERPARAMETERFVNVPROC = *u8;
pub type PFNGLCOMBINERPARAMETERFNVPROC = *u8;
pub type PFNGLCOMBINERPARAMETERIVNVPROC = *u8;
pub type PFNGLCOMBINERPARAMETERINVPROC = *u8;
pub type PFNGLCOMBINERINPUTNVPROC = *u8;
pub type PFNGLCOMBINEROUTPUTNVPROC = *u8;
pub type PFNGLFINALCOMBINERINPUTNVPROC = *u8;
pub type PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = *u8;
pub type PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = *u8;
pub type PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = *u8;
pub type PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = *u8;
pub type PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = *u8;
pub type PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = *u8;
pub type PFNGLRESIZEBUFFERSMESAPROC = *u8;
pub type PFNGLWINDOWPOS2DMESAPROC = *u8;
pub type PFNGLWINDOWPOS2DVMESAPROC = *u8;
pub type PFNGLWINDOWPOS2FMESAPROC = *u8;
pub type PFNGLWINDOWPOS2FVMESAPROC = *u8;
pub type PFNGLWINDOWPOS2IMESAPROC = *u8;
pub type PFNGLWINDOWPOS2IVMESAPROC = *u8;
pub type PFNGLWINDOWPOS2SMESAPROC = *u8;
pub type PFNGLWINDOWPOS2SVMESAPROC = *u8;
pub type PFNGLWINDOWPOS3DMESAPROC = *u8;
pub type PFNGLWINDOWPOS3DVMESAPROC = *u8;
pub type PFNGLWINDOWPOS3FMESAPROC = *u8;
pub type PFNGLWINDOWPOS3FVMESAPROC = *u8;
pub type PFNGLWINDOWPOS3IMESAPROC = *u8;
pub type PFNGLWINDOWPOS3IVMESAPROC = *u8;
pub type PFNGLWINDOWPOS3SMESAPROC = *u8;
pub type PFNGLWINDOWPOS3SVMESAPROC = *u8;
pub type PFNGLWINDOWPOS4DMESAPROC = *u8;
pub type PFNGLWINDOWPOS4DVMESAPROC = *u8;
pub type PFNGLWINDOWPOS4FMESAPROC = *u8;
pub type PFNGLWINDOWPOS4FVMESAPROC = *u8;
pub type PFNGLWINDOWPOS4IMESAPROC = *u8;
pub type PFNGLWINDOWPOS4IVMESAPROC = *u8;
pub type PFNGLWINDOWPOS4SMESAPROC = *u8;
pub type PFNGLWINDOWPOS4SVMESAPROC = *u8;
pub type PFNGLMULTIMODEDRAWARRAYSIBMPROC = *u8;
pub type PFNGLMULTIMODEDRAWELEMENTSIBMPROC = *u8;
pub type PFNGLCOLORPOINTERLISTIBMPROC = *u8;
pub type PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = *u8;
pub type PFNGLEDGEFLAGPOINTERLISTIBMPROC = *u8;
pub type PFNGLFOGCOORDPOINTERLISTIBMPROC = *u8;
pub type PFNGLINDEXPOINTERLISTIBMPROC = *u8;
pub type PFNGLNORMALPOINTERLISTIBMPROC = *u8;
pub type PFNGLTEXCOORDPOINTERLISTIBMPROC = *u8;
pub type PFNGLVERTEXPOINTERLISTIBMPROC = *u8;
pub type PFNGLTBUFFERMASK3DFXPROC = *u8;
pub type PFNGLSAMPLEMASKEXTPROC = *u8;
pub type PFNGLSAMPLEPATTERNEXTPROC = *u8;
pub type PFNGLTEXTURECOLORMASKSGISPROC = *u8;
pub type PFNGLIGLOOINTERFACESGIXPROC = *u8;
pub type PFNGLDELETEFENCESNVPROC = *u8;
pub type PFNGLGENFENCESNVPROC = *u8;
pub type PFNGLISFENCENVPROC = *u8;
pub type PFNGLTESTFENCENVPROC = *u8;
pub type PFNGLGETFENCEIVNVPROC = *u8;
pub type PFNGLFINISHFENCENVPROC = *u8;
pub type PFNGLSETFENCENVPROC = *u8;
pub type PFNGLMAPCONTROLPOINTSNVPROC = *u8;
pub type PFNGLMAPPARAMETERIVNVPROC = *u8;
pub type PFNGLMAPPARAMETERFVNVPROC = *u8;
pub type PFNGLGETMAPCONTROLPOINTSNVPROC = *u8;
pub type PFNGLGETMAPPARAMETERIVNVPROC = *u8;
pub type PFNGLGETMAPPARAMETERFVNVPROC = *u8;
pub type PFNGLGETMAPATTRIBPARAMETERIVNVPROC = *u8;
pub type PFNGLGETMAPATTRIBPARAMETERFVNVPROC = *u8;
pub type PFNGLEVALMAPSNVPROC = *u8;
pub type PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = *u8;
pub type PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = *u8;
pub type PFNGLAREPROGRAMSRESIDENTNVPROC = *u8;
pub type PFNGLBINDPROGRAMNVPROC = *u8;
pub type PFNGLDELETEPROGRAMSNVPROC = *u8;
pub type PFNGLEXECUTEPROGRAMNVPROC = *u8;
pub type PFNGLGENPROGRAMSNVPROC = *u8;
pub type PFNGLGETPROGRAMPARAMETERDVNVPROC = *u8;
pub type PFNGLGETPROGRAMPARAMETERFVNVPROC = *u8;
pub type PFNGLGETPROGRAMIVNVPROC = *u8;
pub type PFNGLGETPROGRAMSTRINGNVPROC = *u8;
pub type PFNGLGETTRACKMATRIXIVNVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBDVNVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBFVNVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBIVNVPROC = *u8;
pub type PFNGLGETVERTEXATTRIBPOINTERVNVPROC = *u8;
pub type PFNGLISPROGRAMNVPROC = *u8;
pub type PFNGLLOADPROGRAMNVPROC = *u8;
pub type PFNGLPROGRAMPARAMETER4DNVPROC = *u8;
pub type PFNGLPROGRAMPARAMETER4DVNVPROC = *u8;
pub type PFNGLPROGRAMPARAMETER4FNVPROC = *u8;
pub type PFNGLPROGRAMPARAMETER4FVNVPROC = *u8;
pub type PFNGLPROGRAMPARAMETERS4DVNVPROC = *u8;
pub type PFNGLPROGRAMPARAMETERS4FVNVPROC = *u8;
pub type PFNGLREQUESTRESIDENTPROGRAMSNVPROC = *u8;
pub type PFNGLTRACKMATRIXNVPROC = *u8;
pub type PFNGLVERTEXATTRIBPOINTERNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1DNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1FNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1SNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2DNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2FNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2SNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3DNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3FNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3SNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4DNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4FNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4SNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4UBNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4UBVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS1DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS1FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS1SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS2DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS2FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS2SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS3DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS3FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS3SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS4DVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS4FVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS4SVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS4UBVNVPROC = *u8;
pub type PFNGLTEXBUMPPARAMETERIVATIPROC = *u8;
pub type PFNGLTEXBUMPPARAMETERFVATIPROC = *u8;
pub type PFNGLGETTEXBUMPPARAMETERIVATIPROC = *u8;
pub type PFNGLGETTEXBUMPPARAMETERFVATIPROC = *u8;
pub type PFNGLGENFRAGMENTSHADERSATIPROC = *u8;
pub type PFNGLBINDFRAGMENTSHADERATIPROC = *u8;
pub type PFNGLDELETEFRAGMENTSHADERATIPROC = *u8;
pub type PFNGLBEGINFRAGMENTSHADERATIPROC = *u8;
pub type PFNGLENDFRAGMENTSHADERATIPROC = *u8;
pub type PFNGLPASSTEXCOORDATIPROC = *u8;
pub type PFNGLSAMPLEMAPATIPROC = *u8;
pub type PFNGLCOLORFRAGMENTOP1ATIPROC = *u8;
pub type PFNGLCOLORFRAGMENTOP2ATIPROC = *u8;
pub type PFNGLCOLORFRAGMENTOP3ATIPROC = *u8;
pub type PFNGLALPHAFRAGMENTOP1ATIPROC = *u8;
pub type PFNGLALPHAFRAGMENTOP2ATIPROC = *u8;
pub type PFNGLALPHAFRAGMENTOP3ATIPROC = *u8;
pub type PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = *u8;
pub type PFNGLPNTRIANGLESIATIPROC = *u8;
pub type PFNGLPNTRIANGLESFATIPROC = *u8;
pub type PFNGLNEWOBJECTBUFFERATIPROC = *u8;
pub type PFNGLISOBJECTBUFFERATIPROC = *u8;
pub type PFNGLUPDATEOBJECTBUFFERATIPROC = *u8;
pub type PFNGLGETOBJECTBUFFERFVATIPROC = *u8;
pub type PFNGLGETOBJECTBUFFERIVATIPROC = *u8;
pub type PFNGLFREEOBJECTBUFFERATIPROC = *u8;
pub type PFNGLARRAYOBJECTATIPROC = *u8;
pub type PFNGLGETARRAYOBJECTFVATIPROC = *u8;
pub type PFNGLGETARRAYOBJECTIVATIPROC = *u8;
pub type PFNGLVARIANTARRAYOBJECTATIPROC = *u8;
pub type PFNGLGETVARIANTARRAYOBJECTFVATIPROC = *u8;
pub type PFNGLGETVARIANTARRAYOBJECTIVATIPROC = *u8;
pub type PFNGLBEGINVERTEXSHADEREXTPROC = *u8;
pub type PFNGLENDVERTEXSHADEREXTPROC = *u8;
pub type PFNGLBINDVERTEXSHADEREXTPROC = *u8;
pub type PFNGLGENVERTEXSHADERSEXTPROC = *u8;
pub type PFNGLDELETEVERTEXSHADEREXTPROC = *u8;
pub type PFNGLSHADEROP1EXTPROC = *u8;
pub type PFNGLSHADEROP2EXTPROC = *u8;
pub type PFNGLSHADEROP3EXTPROC = *u8;
pub type PFNGLSWIZZLEEXTPROC = *u8;
pub type PFNGLWRITEMASKEXTPROC = *u8;
pub type PFNGLINSERTCOMPONENTEXTPROC = *u8;
pub type PFNGLEXTRACTCOMPONENTEXTPROC = *u8;
pub type PFNGLGENSYMBOLSEXTPROC = *u8;
pub type PFNGLSETINVARIANTEXTPROC = *u8;
pub type PFNGLSETLOCALCONSTANTEXTPROC = *u8;
pub type PFNGLVARIANTBVEXTPROC = *u8;
pub type PFNGLVARIANTSVEXTPROC = *u8;
pub type PFNGLVARIANTIVEXTPROC = *u8;
pub type PFNGLVARIANTFVEXTPROC = *u8;
pub type PFNGLVARIANTDVEXTPROC = *u8;
pub type PFNGLVARIANTUBVEXTPROC = *u8;
pub type PFNGLVARIANTUSVEXTPROC = *u8;
pub type PFNGLVARIANTUIVEXTPROC = *u8;
pub type PFNGLVARIANTPOINTEREXTPROC = *u8;
pub type PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = *u8;
pub type PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = *u8;
pub type PFNGLBINDLIGHTPARAMETEREXTPROC = *u8;
pub type PFNGLBINDMATERIALPARAMETEREXTPROC = *u8;
pub type PFNGLBINDTEXGENPARAMETEREXTPROC = *u8;
pub type PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = *u8;
pub type PFNGLBINDPARAMETEREXTPROC = *u8;
pub type PFNGLISVARIANTENABLEDEXTPROC = *u8;
pub type PFNGLGETVARIANTBOOLEANVEXTPROC = *u8;
pub type PFNGLGETVARIANTINTEGERVEXTPROC = *u8;
pub type PFNGLGETVARIANTFLOATVEXTPROC = *u8;
pub type PFNGLGETVARIANTPOINTERVEXTPROC = *u8;
pub type PFNGLGETINVARIANTBOOLEANVEXTPROC = *u8;
pub type PFNGLGETINVARIANTINTEGERVEXTPROC = *u8;
pub type PFNGLGETINVARIANTFLOATVEXTPROC = *u8;
pub type PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = *u8;
pub type PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = *u8;
pub type PFNGLGETLOCALCONSTANTFLOATVEXTPROC = *u8;
pub type PFNGLVERTEXSTREAM1SATIPROC = *u8;
pub type PFNGLVERTEXSTREAM1SVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM1IATIPROC = *u8;
pub type PFNGLVERTEXSTREAM1IVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM1FATIPROC = *u8;
pub type PFNGLVERTEXSTREAM1FVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM1DATIPROC = *u8;
pub type PFNGLVERTEXSTREAM1DVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2SATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2SVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2IATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2IVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2FATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2FVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2DATIPROC = *u8;
pub type PFNGLVERTEXSTREAM2DVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3SATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3SVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3IATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3IVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3FATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3FVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3DATIPROC = *u8;
pub type PFNGLVERTEXSTREAM3DVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4SATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4SVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4IATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4IVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4FATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4FVATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4DATIPROC = *u8;
pub type PFNGLVERTEXSTREAM4DVATIPROC = *u8;
pub type PFNGLNORMALSTREAM3BATIPROC = *u8;
pub type PFNGLNORMALSTREAM3BVATIPROC = *u8;
pub type PFNGLNORMALSTREAM3SATIPROC = *u8;
pub type PFNGLNORMALSTREAM3SVATIPROC = *u8;
pub type PFNGLNORMALSTREAM3IATIPROC = *u8;
pub type PFNGLNORMALSTREAM3IVATIPROC = *u8;
pub type PFNGLNORMALSTREAM3FATIPROC = *u8;
pub type PFNGLNORMALSTREAM3FVATIPROC = *u8;
pub type PFNGLNORMALSTREAM3DATIPROC = *u8;
pub type PFNGLNORMALSTREAM3DVATIPROC = *u8;
pub type PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = *u8;
pub type PFNGLVERTEXBLENDENVIATIPROC = *u8;
pub type PFNGLVERTEXBLENDENVFATIPROC = *u8;
pub type PFNGLELEMENTPOINTERATIPROC = *u8;
pub type PFNGLDRAWELEMENTARRAYATIPROC = *u8;
pub type PFNGLDRAWRANGEELEMENTARRAYATIPROC = *u8;
pub type PFNGLDRAWMESHARRAYSSUNPROC = *u8;
pub type PFNGLGENOCCLUSIONQUERIESNVPROC = *u8;
pub type PFNGLDELETEOCCLUSIONQUERIESNVPROC = *u8;
pub type PFNGLISOCCLUSIONQUERYNVPROC = *u8;
pub type PFNGLBEGINOCCLUSIONQUERYNVPROC = *u8;
pub type PFNGLENDOCCLUSIONQUERYNVPROC = *u8;
pub type PFNGLGETOCCLUSIONQUERYIVNVPROC = *u8;
pub type PFNGLGETOCCLUSIONQUERYUIVNVPROC = *u8;
pub type PFNGLPOINTPARAMETERINVPROC = *u8;
pub type PFNGLPOINTPARAMETERIVNVPROC = *u8;
pub type PFNGLACTIVESTENCILFACEEXTPROC = *u8;
pub type PFNGLELEMENTPOINTERAPPLEPROC = *u8;
pub type PFNGLDRAWELEMENTARRAYAPPLEPROC = *u8;
pub type PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = *u8;
pub type PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = *u8;
pub type PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = *u8;
pub type PFNGLGENFENCESAPPLEPROC = *u8;
pub type PFNGLDELETEFENCESAPPLEPROC = *u8;
pub type PFNGLSETFENCEAPPLEPROC = *u8;
pub type PFNGLISFENCEAPPLEPROC = *u8;
pub type PFNGLTESTFENCEAPPLEPROC = *u8;
pub type PFNGLFINISHFENCEAPPLEPROC = *u8;
pub type PFNGLTESTOBJECTAPPLEPROC = *u8;
pub type PFNGLFINISHOBJECTAPPLEPROC = *u8;
pub type PFNGLBINDVERTEXARRAYAPPLEPROC = *u8;
pub type PFNGLDELETEVERTEXARRAYSAPPLEPROC = *u8;
pub type PFNGLGENVERTEXARRAYSAPPLEPROC = *u8;
pub type PFNGLISVERTEXARRAYAPPLEPROC = *u8;
pub type PFNGLVERTEXARRAYRANGEAPPLEPROC = *u8;
pub type PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = *u8;
pub type PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = *u8;
pub type PFNGLDRAWBUFFERSATIPROC = *u8;
pub type PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = *u8;
pub type PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = *u8;
pub type PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = *u8;
pub type PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = *u8;
pub type PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = *u8;
pub type PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = *u8;
pub type PFNGLVERTEX2HNVPROC = *u8;
pub type PFNGLVERTEX2HVNVPROC = *u8;
pub type PFNGLVERTEX3HNVPROC = *u8;
pub type PFNGLVERTEX3HVNVPROC = *u8;
pub type PFNGLVERTEX4HNVPROC = *u8;
pub type PFNGLVERTEX4HVNVPROC = *u8;
pub type PFNGLNORMAL3HNVPROC = *u8;
pub type PFNGLNORMAL3HVNVPROC = *u8;
pub type PFNGLCOLOR3HNVPROC = *u8;
pub type PFNGLCOLOR3HVNVPROC = *u8;
pub type PFNGLCOLOR4HNVPROC = *u8;
pub type PFNGLCOLOR4HVNVPROC = *u8;
pub type PFNGLTEXCOORD1HNVPROC = *u8;
pub type PFNGLTEXCOORD1HVNVPROC = *u8;
pub type PFNGLTEXCOORD2HNVPROC = *u8;
pub type PFNGLTEXCOORD2HVNVPROC = *u8;
pub type PFNGLTEXCOORD3HNVPROC = *u8;
pub type PFNGLTEXCOORD3HVNVPROC = *u8;
pub type PFNGLTEXCOORD4HNVPROC = *u8;
pub type PFNGLTEXCOORD4HVNVPROC = *u8;
pub type PFNGLMULTITEXCOORD1HNVPROC = *u8;
pub type PFNGLMULTITEXCOORD1HVNVPROC = *u8;
pub type PFNGLMULTITEXCOORD2HNVPROC = *u8;
pub type PFNGLMULTITEXCOORD2HVNVPROC = *u8;
pub type PFNGLMULTITEXCOORD3HNVPROC = *u8;
pub type PFNGLMULTITEXCOORD3HVNVPROC = *u8;
pub type PFNGLMULTITEXCOORD4HNVPROC = *u8;
pub type PFNGLMULTITEXCOORD4HVNVPROC = *u8;
pub type PFNGLFOGCOORDHNVPROC = *u8;
pub type PFNGLFOGCOORDHVNVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3HNVPROC = *u8;
pub type PFNGLSECONDARYCOLOR3HVNVPROC = *u8;
pub type PFNGLVERTEXWEIGHTHNVPROC = *u8;
pub type PFNGLVERTEXWEIGHTHVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1HNVPROC = *u8;
pub type PFNGLVERTEXATTRIB1HVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2HNVPROC = *u8;
pub type PFNGLVERTEXATTRIB2HVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3HNVPROC = *u8;
pub type PFNGLVERTEXATTRIB3HVNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4HNVPROC = *u8;
pub type PFNGLVERTEXATTRIB4HVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS1HVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS2HVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS3HVNVPROC = *u8;
pub type PFNGLVERTEXATTRIBS4HVNVPROC = *u8;
pub type PFNGLPIXELDATARANGENVPROC = *u8;
pub type PFNGLFLUSHPIXELDATARANGENVPROC = *u8;
pub type PFNGLPRIMITIVERESTARTNVPROC = *u8;
pub type PFNGLPRIMITIVERESTARTINDEXNVPROC = *u8;
pub type PFNGLMAPOBJECTBUFFERATIPROC = *u8;
pub type PFNGLUNMAPOBJECTBUFFERATIPROC = *u8;
pub type PFNGLSTENCILOPSEPARATEATIPROC = *u8;
pub type PFNGLSTENCILFUNCSEPARATEATIPROC = *u8;
pub type PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = *u8;
pub type PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = *u8;
pub type PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = *u8;
pub type PFNGLDEPTHBOUNDSEXTPROC = *u8;
pub type PFNGLBLENDEQUATIONSEPARATEEXTPROC = *u8;
pub type PFNGLISRENDERBUFFEREXTPROC = *u8;
pub type PFNGLBINDRENDERBUFFEREXTPROC = *u8;
pub type PFNGLDELETERENDERBUFFERSEXTPROC = *u8;
pub type PFNGLGENRENDERBUFFERSEXTPROC = *u8;
pub type PFNGLRENDERBUFFERSTORAGEEXTPROC = *u8;
pub type PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = *u8;
pub type PFNGLISFRAMEBUFFEREXTPROC = *u8;
pub type PFNGLBINDFRAMEBUFFEREXTPROC = *u8;
pub type PFNGLDELETEFRAMEBUFFERSEXTPROC = *u8;
pub type PFNGLGENFRAMEBUFFERSEXTPROC = *u8;
pub type PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = *u8;
pub type PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = *u8;
pub type PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = *u8;
pub type PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = *u8;
pub type PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = *u8;
pub type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = *u8;
pub type PFNGLGENERATEMIPMAPEXTPROC = *u8;
pub type PFNGLSTRINGMARKERGREMEDYPROC = *u8;
#[link_args = "-lGL"]
pub extern "C" {
    fn glClearIndex(++c: GLfloat);
    fn glClearColor(++red: GLclampf, ++green: GLclampf, ++blue: GLclampf,
                    ++alpha: GLclampf);
    fn glClear(++mask: GLbitfield);
    fn glIndexMask(++mask: GLuint);
    fn glColorMask(++red: GLboolean, ++green: GLboolean, ++blue: GLboolean,
                   ++alpha: GLboolean);
    fn glAlphaFunc(++func: GLenum, ++_ref: GLclampf);
    fn glBlendFunc(++sfactor: GLenum, ++dfactor: GLenum);
    fn glLogicOp(++opcode: GLenum);
    fn glCullFace(++mode: GLenum);
    fn glFrontFace(++mode: GLenum);
    fn glPointSize(++size: GLfloat);
    fn glLineWidth(++width: GLfloat);
    fn glLineStipple(++factor: GLint, ++pattern: GLushort);
    fn glPolygonMode(++face: GLenum, ++mode: GLenum);
    fn glPolygonOffset(++factor: GLfloat, ++units: GLfloat);
    fn glPolygonStipple(++mask: *GLubyte);
    fn glGetPolygonStipple(++mask: *GLubyte);
    fn glEdgeFlag(++flag: GLboolean);
    fn glEdgeFlagv(++flag: *GLboolean);
    fn glScissor(++x: GLint, ++y: GLint, ++width: GLsizei, ++height: GLsizei);
    fn glClipPlane(++plane: GLenum, ++equation: *GLdouble);
    fn glGetClipPlane(++plane: GLenum, ++equation: *GLdouble);
    fn glDrawBuffer(++mode: GLenum);
    fn glReadBuffer(++mode: GLenum);
    fn glEnable(++cap: GLenum);
    fn glDisable(++cap: GLenum);
    fn glIsEnabled(++cap: GLenum) -> GLboolean;
    fn glEnableClientState(++cap: GLenum);
    fn glDisableClientState(++cap: GLenum);
    fn glGetBooleanv(++pname: GLenum, ++params: *GLboolean);
    fn glGetDoublev(++pname: GLenum, ++params: *GLdouble);
    fn glGetFloatv(++pname: GLenum, ++params: *GLfloat);
    fn glGetIntegerv(++pname: GLenum, ++params: *GLint);
    fn glPushAttrib(++mask: GLbitfield);
    fn glPopAttrib();
    fn glPushClientAttrib(++mask: GLbitfield);
    fn glPopClientAttrib();
    fn glRenderMode(++mode: GLenum) -> GLint;
    fn glGetError() -> GLenum;
    fn glGetString(++name: GLenum) -> *GLubyte;
    fn glFinish();
    fn glFlush();
    fn glHint(++target: GLenum, ++mode: GLenum);
    fn glClearDepth(++depth: GLclampd);
    fn glDepthFunc(++func: GLenum);
    fn glDepthMask(++flag: GLboolean);
    fn glDepthRange(++near_val: GLclampd, ++far_val: GLclampd);
    fn glClearAccum(++red: GLfloat, ++green: GLfloat, ++blue: GLfloat,
                    ++alpha: GLfloat);
    fn glAccum(++op: GLenum, ++value: GLfloat);
    fn glMatrixMode(++mode: GLenum);
    fn glOrtho(++left: GLdouble, ++right: GLdouble, ++bottom: GLdouble,
               ++top: GLdouble, ++near_val: GLdouble, ++far_val: GLdouble);
    fn glFrustum(++left: GLdouble, ++right: GLdouble, ++bottom: GLdouble,
                 ++top: GLdouble, ++near_val: GLdouble, ++far_val: GLdouble);
    fn glViewport(++x: GLint, ++y: GLint, ++width: GLsizei,
                  ++height: GLsizei);
    fn glPushMatrix();
    fn glPopMatrix();
    fn glLoadIdentity();
    fn glLoadMatrixd(++m: *GLdouble);
    fn glLoadMatrixf(++m: *GLfloat);
    fn glMultMatrixd(++m: *GLdouble);
    fn glMultMatrixf(++m: *GLfloat);
    fn glRotated(++angle: GLdouble, ++x: GLdouble, ++y: GLdouble,
                 ++z: GLdouble);
    fn glRotatef(++angle: GLfloat, ++x: GLfloat, ++y: GLfloat, ++z: GLfloat);
    fn glScaled(++x: GLdouble, ++y: GLdouble, ++z: GLdouble);
    fn glScalef(++x: GLfloat, ++y: GLfloat, ++z: GLfloat);
    fn glTranslated(++x: GLdouble, ++y: GLdouble, ++z: GLdouble);
    fn glTranslatef(++x: GLfloat, ++y: GLfloat, ++z: GLfloat);
    fn glIsList(++list: GLuint) -> GLboolean;
    fn glDeleteLists(++list: GLuint, ++range: GLsizei);
    fn glGenLists(++range: GLsizei) -> GLuint;
    fn glNewList(++list: GLuint, ++mode: GLenum);
    fn glEndList();
    fn glCallList(++list: GLuint);
    fn glCallLists(++n: GLsizei, ++_type: GLenum, ++lists: *GLvoid);
    fn glListBase(++base: GLuint);
    fn glBegin(++mode: GLenum);
    fn glEnd();
    fn glVertex2d(++x: GLdouble, ++y: GLdouble);
    fn glVertex2f(++x: GLfloat, ++y: GLfloat);
    fn glVertex2i(++x: GLint, ++y: GLint);
    fn glVertex2s(++x: GLshort, ++y: GLshort);
    fn glVertex3d(++x: GLdouble, ++y: GLdouble, ++z: GLdouble);
    fn glVertex3f(++x: GLfloat, ++y: GLfloat, ++z: GLfloat);
    fn glVertex3i(++x: GLint, ++y: GLint, ++z: GLint);
    fn glVertex3s(++x: GLshort, ++y: GLshort, ++z: GLshort);
    fn glVertex4d(++x: GLdouble, ++y: GLdouble, ++z: GLdouble, ++w: GLdouble);
    fn glVertex4f(++x: GLfloat, ++y: GLfloat, ++z: GLfloat, ++w: GLfloat);
    fn glVertex4i(++x: GLint, ++y: GLint, ++z: GLint, ++w: GLint);
    fn glVertex4s(++x: GLshort, ++y: GLshort, ++z: GLshort, ++w: GLshort);
    fn glVertex2dv(++v: *GLdouble);
    fn glVertex2fv(++v: *GLfloat);
    fn glVertex2iv(++v: *GLint);
    fn glVertex2sv(++v: *GLshort);
    fn glVertex3dv(++v: *GLdouble);
    fn glVertex3fv(++v: *GLfloat);
    fn glVertex3iv(++v: *GLint);
    fn glVertex3sv(++v: *GLshort);
    fn glVertex4dv(++v: *GLdouble);
    fn glVertex4fv(++v: *GLfloat);
    fn glVertex4iv(++v: *GLint);
    fn glVertex4sv(++v: *GLshort);
    fn glNormal3b(++nx: GLbyte, ++ny: GLbyte, ++nz: GLbyte);
    fn glNormal3d(++nx: GLdouble, ++ny: GLdouble, ++nz: GLdouble);
    fn glNormal3f(++nx: GLfloat, ++ny: GLfloat, ++nz: GLfloat);
    fn glNormal3i(++nx: GLint, ++ny: GLint, ++nz: GLint);
    fn glNormal3s(++nx: GLshort, ++ny: GLshort, ++nz: GLshort);
    fn glNormal3bv(++v: *GLbyte);
    fn glNormal3dv(++v: *GLdouble);
    fn glNormal3fv(++v: *GLfloat);
    fn glNormal3iv(++v: *GLint);
    fn glNormal3sv(++v: *GLshort);
    fn glIndexd(++c: GLdouble);
    fn glIndexf(++c: GLfloat);
    fn glIndexi(++c: GLint);
    fn glIndexs(++c: GLshort);
    fn glIndexub(++c: GLubyte);
    fn glIndexdv(++c: *GLdouble);
    fn glIndexfv(++c: *GLfloat);
    fn glIndexiv(++c: *GLint);
    fn glIndexsv(++c: *GLshort);
    fn glIndexubv(++c: *GLubyte);
    fn glColor3b(++red: GLbyte, ++green: GLbyte, ++blue: GLbyte);
    fn glColor3d(++red: GLdouble, ++green: GLdouble, ++blue: GLdouble);
    fn glColor3f(++red: GLfloat, ++green: GLfloat, ++blue: GLfloat);
    fn glColor3i(++red: GLint, ++green: GLint, ++blue: GLint);
    fn glColor3s(++red: GLshort, ++green: GLshort, ++blue: GLshort);
    fn glColor3ub(++red: GLubyte, ++green: GLubyte, ++blue: GLubyte);
    fn glColor3ui(++red: GLuint, ++green: GLuint, ++blue: GLuint);
    fn glColor3us(++red: GLushort, ++green: GLushort, ++blue: GLushort);
    fn glColor4b(++red: GLbyte, ++green: GLbyte, ++blue: GLbyte,
                 ++alpha: GLbyte);
    fn glColor4d(++red: GLdouble, ++green: GLdouble, ++blue: GLdouble,
                 ++alpha: GLdouble);
    fn glColor4f(++red: GLfloat, ++green: GLfloat, ++blue: GLfloat,
                 ++alpha: GLfloat);
    fn glColor4i(++red: GLint, ++green: GLint, ++blue: GLint, ++alpha: GLint);
    fn glColor4s(++red: GLshort, ++green: GLshort, ++blue: GLshort,
                 ++alpha: GLshort);
    fn glColor4ub(++red: GLubyte, ++green: GLubyte, ++blue: GLubyte,
                  ++alpha: GLubyte);
    fn glColor4ui(++red: GLuint, ++green: GLuint, ++blue: GLuint,
                  ++alpha: GLuint);
    fn glColor4us(++red: GLushort, ++green: GLushort, ++blue: GLushort,
                  ++alpha: GLushort);
    fn glColor3bv(++v: *GLbyte);
    fn glColor3dv(++v: *GLdouble);
    fn glColor3fv(++v: *GLfloat);
    fn glColor3iv(++v: *GLint);
    fn glColor3sv(++v: *GLshort);
    fn glColor3ubv(++v: *GLubyte);
    fn glColor3uiv(++v: *GLuint);
    fn glColor3usv(++v: *GLushort);
    fn glColor4bv(++v: *GLbyte);
    fn glColor4dv(++v: *GLdouble);
    fn glColor4fv(++v: *GLfloat);
    fn glColor4iv(++v: *GLint);
    fn glColor4sv(++v: *GLshort);
    fn glColor4ubv(++v: *GLubyte);
    fn glColor4uiv(++v: *GLuint);
    fn glColor4usv(++v: *GLushort);
    fn glTexCoord1d(++s: GLdouble);
    fn glTexCoord1f(++s: GLfloat);
    fn glTexCoord1i(++s: GLint);
    fn glTexCoord1s(++s: GLshort);
    fn glTexCoord2d(++s: GLdouble, ++t: GLdouble);
    fn glTexCoord2f(++s: GLfloat, ++t: GLfloat);
    fn glTexCoord2i(++s: GLint, ++t: GLint);
    fn glTexCoord2s(++s: GLshort, ++t: GLshort);
    fn glTexCoord3d(++s: GLdouble, ++t: GLdouble, ++r: GLdouble);
    fn glTexCoord3f(++s: GLfloat, ++t: GLfloat, ++r: GLfloat);
    fn glTexCoord3i(++s: GLint, ++t: GLint, ++r: GLint);
    fn glTexCoord3s(++s: GLshort, ++t: GLshort, ++r: GLshort);
    fn glTexCoord4d(++s: GLdouble, ++t: GLdouble, ++r: GLdouble,
                    ++q: GLdouble);
    fn glTexCoord4f(++s: GLfloat, ++t: GLfloat, ++r: GLfloat, ++q: GLfloat);
    fn glTexCoord4i(++s: GLint, ++t: GLint, ++r: GLint, ++q: GLint);
    fn glTexCoord4s(++s: GLshort, ++t: GLshort, ++r: GLshort, ++q: GLshort);
    fn glTexCoord1dv(++v: *GLdouble);
    fn glTexCoord1fv(++v: *GLfloat);
    fn glTexCoord1iv(++v: *GLint);
    fn glTexCoord1sv(++v: *GLshort);
    fn glTexCoord2dv(++v: *GLdouble);
    fn glTexCoord2fv(++v: *GLfloat);
    fn glTexCoord2iv(++v: *GLint);
    fn glTexCoord2sv(++v: *GLshort);
    fn glTexCoord3dv(++v: *GLdouble);
    fn glTexCoord3fv(++v: *GLfloat);
    fn glTexCoord3iv(++v: *GLint);
    fn glTexCoord3sv(++v: *GLshort);
    fn glTexCoord4dv(++v: *GLdouble);
    fn glTexCoord4fv(++v: *GLfloat);
    fn glTexCoord4iv(++v: *GLint);
    fn glTexCoord4sv(++v: *GLshort);
    fn glRasterPos2d(++x: GLdouble, ++y: GLdouble);
    fn glRasterPos2f(++x: GLfloat, ++y: GLfloat);
    fn glRasterPos2i(++x: GLint, ++y: GLint);
    fn glRasterPos2s(++x: GLshort, ++y: GLshort);
    fn glRasterPos3d(++x: GLdouble, ++y: GLdouble, ++z: GLdouble);
    fn glRasterPos3f(++x: GLfloat, ++y: GLfloat, ++z: GLfloat);
    fn glRasterPos3i(++x: GLint, ++y: GLint, ++z: GLint);
    fn glRasterPos3s(++x: GLshort, ++y: GLshort, ++z: GLshort);
    fn glRasterPos4d(++x: GLdouble, ++y: GLdouble, ++z: GLdouble,
                     ++w: GLdouble);
    fn glRasterPos4f(++x: GLfloat, ++y: GLfloat, ++z: GLfloat, ++w: GLfloat);
    fn glRasterPos4i(++x: GLint, ++y: GLint, ++z: GLint, ++w: GLint);
    fn glRasterPos4s(++x: GLshort, ++y: GLshort, ++z: GLshort, ++w: GLshort);
    fn glRasterPos2dv(++v: *GLdouble);
    fn glRasterPos2fv(++v: *GLfloat);
    fn glRasterPos2iv(++v: *GLint);
    fn glRasterPos2sv(++v: *GLshort);
    fn glRasterPos3dv(++v: *GLdouble);
    fn glRasterPos3fv(++v: *GLfloat);
    fn glRasterPos3iv(++v: *GLint);
    fn glRasterPos3sv(++v: *GLshort);
    fn glRasterPos4dv(++v: *GLdouble);
    fn glRasterPos4fv(++v: *GLfloat);
    fn glRasterPos4iv(++v: *GLint);
    fn glRasterPos4sv(++v: *GLshort);
    fn glRectd(++x1: GLdouble, ++y1: GLdouble, ++x2: GLdouble,
               ++y2: GLdouble);
    fn glRectf(++x1: GLfloat, ++y1: GLfloat, ++x2: GLfloat, ++y2: GLfloat);
    fn glRecti(++x1: GLint, ++y1: GLint, ++x2: GLint, ++y2: GLint);
    fn glRects(++x1: GLshort, ++y1: GLshort, ++x2: GLshort, ++y2: GLshort);
    fn glRectdv(++v1: *GLdouble, ++v2: *GLdouble);
    fn glRectfv(++v1: *GLfloat, ++v2: *GLfloat);
    fn glRectiv(++v1: *GLint, ++v2: *GLint);
    fn glRectsv(++v1: *GLshort, ++v2: *GLshort);
    fn glVertexPointer(++size: GLint, ++_type: GLenum, ++stride: GLsizei,
                       ++ptr: *GLvoid);
    fn glNormalPointer(++_type: GLenum, ++stride: GLsizei, ++ptr: *GLvoid);
    fn glColorPointer(++size: GLint, ++_type: GLenum, ++stride: GLsizei,
                      ++ptr: *GLvoid);
    fn glIndexPointer(++_type: GLenum, ++stride: GLsizei, ++ptr: *GLvoid);
    fn glTexCoordPointer(++size: GLint, ++_type: GLenum, ++stride: GLsizei,
                         ++ptr: *GLvoid);
    fn glEdgeFlagPointer(++stride: GLsizei, ++ptr: *GLvoid);
    fn glGetPointerv(++pname: GLenum, ++params: **GLvoid);
    fn glArrayElement(++i: GLint);
    fn glDrawArrays(++mode: GLenum, ++first: GLint, ++count: GLsizei);
    fn glDrawElements(++mode: GLenum, ++count: GLsizei, ++_type: GLenum,
                      ++indices: *GLvoid);
    fn glInterleavedArrays(++format: GLenum, ++stride: GLsizei,
                           ++pointer: *GLvoid);
    fn glShadeModel(++mode: GLenum);
    fn glLightf(++light: GLenum, ++pname: GLenum, ++param: GLfloat);
    fn glLighti(++light: GLenum, ++pname: GLenum, ++param: GLint);
    fn glLightfv(++light: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glLightiv(++light: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glGetLightfv(++light: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glGetLightiv(++light: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glLightModelf(++pname: GLenum, ++param: GLfloat);
    fn glLightModeli(++pname: GLenum, ++param: GLint);
    fn glLightModelfv(++pname: GLenum, ++params: *GLfloat);
    fn glLightModeliv(++pname: GLenum, ++params: *GLint);
    fn glMaterialf(++face: GLenum, ++pname: GLenum, ++param: GLfloat);
    fn glMateriali(++face: GLenum, ++pname: GLenum, ++param: GLint);
    fn glMaterialfv(++face: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glMaterialiv(++face: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glGetMaterialfv(++face: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glGetMaterialiv(++face: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glColorMaterial(++face: GLenum, ++mode: GLenum);
    fn glPixelZoom(++xfactor: GLfloat, ++yfactor: GLfloat);
    fn glPixelStoref(++pname: GLenum, ++param: GLfloat);
    fn glPixelStorei(++pname: GLenum, ++param: GLint);
    fn glPixelTransferf(++pname: GLenum, ++param: GLfloat);
    fn glPixelTransferi(++pname: GLenum, ++param: GLint);
    fn glPixelMapfv(++map: GLenum, ++mapsize: GLsizei, ++values: *GLfloat);
    fn glPixelMapuiv(++map: GLenum, ++mapsize: GLsizei, ++values: *GLuint);
    fn glPixelMapusv(++map: GLenum, ++mapsize: GLsizei, ++values: *GLushort);
    fn glGetPixelMapfv(++map: GLenum, ++values: *GLfloat);
    fn glGetPixelMapuiv(++map: GLenum, ++values: *GLuint);
    fn glGetPixelMapusv(++map: GLenum, ++values: *GLushort);
    fn glBitmap(++width: GLsizei, ++height: GLsizei, ++xorig: GLfloat,
                ++yorig: GLfloat, ++xmove: GLfloat, ++ymove: GLfloat,
                ++bitmap: *GLubyte);
    fn glReadPixels(++x: GLint, ++y: GLint, ++width: GLsizei,
                    ++height: GLsizei, ++format: GLenum, ++_type: GLenum,
                    ++pixels: *GLvoid);
    fn glDrawPixels(++width: GLsizei, ++height: GLsizei, ++format: GLenum,
                    ++_type: GLenum, ++pixels: *GLvoid);
    fn glCopyPixels(++x: GLint, ++y: GLint, ++width: GLsizei,
                    ++height: GLsizei, ++_type: GLenum);
    fn glStencilFunc(++func: GLenum, ++_ref: GLint, ++mask: GLuint);
    fn glStencilMask(++mask: GLuint);
    fn glStencilOp(++_fail: GLenum, ++zfail: GLenum, ++zpass: GLenum);
    fn glClearStencil(++s: GLint);
    fn glTexGend(++coord: GLenum, ++pname: GLenum, ++param: GLdouble);
    fn glTexGenf(++coord: GLenum, ++pname: GLenum, ++param: GLfloat);
    fn glTexGeni(++coord: GLenum, ++pname: GLenum, ++param: GLint);
    fn glTexGendv(++coord: GLenum, ++pname: GLenum, ++params: *GLdouble);
    fn glTexGenfv(++coord: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glTexGeniv(++coord: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glGetTexGendv(++coord: GLenum, ++pname: GLenum, ++params: *GLdouble);
    fn glGetTexGenfv(++coord: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glGetTexGeniv(++coord: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glTexEnvf(++target: GLenum, ++pname: GLenum, ++param: GLfloat);
    fn glTexEnvi(++target: GLenum, ++pname: GLenum, ++param: GLint);
    fn glTexEnvfv(++target: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glTexEnviv(++target: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glGetTexEnvfv(++target: GLenum, ++pname: GLenum, ++params: *GLfloat);
    fn glGetTexEnviv(++target: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glTexParameterf(++target: GLenum, ++pname: GLenum, ++param: GLfloat);
    fn glTexParameteri(++target: GLenum, ++pname: GLenum, ++param: GLint);
    fn glTexParameterfv(++target: GLenum, ++pname: GLenum,
                        ++params: *GLfloat);
    fn glTexParameteriv(++target: GLenum, ++pname: GLenum, ++params: *GLint);
    fn glGetTexParameterfv(++target: GLenum, ++pname: GLenum,
                           ++params: *GLfloat);
    fn glGetTexParameteriv(++target: GLenum, ++pname: GLenum,
                           ++params: *GLint);
    fn glGetTexLevelParameterfv(++target: GLenum, ++level: GLint,
                                ++pname: GLenum, ++params: *GLfloat);
    fn glGetTexLevelParameteriv(++target: GLenum, ++level: GLint,
                                ++pname: GLenum, ++params: *GLint);
    fn glTexImage1D(++target: GLenum, ++level: GLint, ++internalFormat: GLint,
                    ++width: GLsizei, ++border: GLint, ++format: GLenum,
                    ++_type: GLenum, ++pixels: *GLvoid);
    fn glTexImage2D(++target: GLenum, ++level: GLint, ++internalFormat: GLint,
                    ++width: GLsizei, ++height: GLsizei, ++border: GLint,
                    ++format: GLenum, ++_type: GLenum, ++pixels: *GLvoid);
    fn glGetTexImage(++target: GLenum, ++level: GLint, ++format: GLenum,
                     ++_type: GLenum, ++pixels: *GLvoid);
    fn glGenTextures(++n: GLsizei, ++textures: *GLuint);
    fn glDeleteTextures(++n: GLsizei, ++textures: *GLuint);
    fn glBindTexture(++target: GLenum, ++texture: GLuint);
    fn glPrioritizeTextures(++n: GLsizei, ++textures: *GLuint,
                            ++priorities: *GLclampf);
    fn glAreTexturesResident(++n: GLsizei, ++textures: *GLuint,
                             ++residences: *GLboolean) -> GLboolean;
    fn glIsTexture(++texture: GLuint) -> GLboolean;
    fn glTexSubImage1D(++target: GLenum, ++level: GLint, ++xoffset: GLint,
                       ++width: GLsizei, ++format: GLenum, ++_type: GLenum,
                       ++pixels: *GLvoid);
    fn glTexSubImage2D(++target: GLenum, ++level: GLint, ++xoffset: GLint,
                       ++yoffset: GLint, ++width: GLsizei, ++height: GLsizei,
                       ++format: GLenum, ++_type: GLenum, ++pixels: *GLvoid);
    fn glCopyTexImage1D(++target: GLenum, ++level: GLint,
                        ++internalformat: GLenum, ++x: GLint, ++y: GLint,
                        ++width: GLsizei, ++border: GLint);
    fn glCopyTexImage2D(++target: GLenum, ++level: GLint,
                        ++internalformat: GLenum, ++x: GLint, ++y: GLint,
                        ++width: GLsizei, ++height: GLsizei, ++border: GLint);
    fn glCopyTexSubImage1D(++target: GLenum, ++level: GLint, ++xoffset: GLint,
                           ++x: GLint, ++y: GLint, ++width: GLsizei);
    fn glCopyTexSubImage2D(++target: GLenum, ++level: GLint, ++xoffset: GLint,
                           ++yoffset: GLint, ++x: GLint, ++y: GLint,
                           ++width: GLsizei, ++height: GLsizei);
    fn glMap1d(++target: GLenum, ++u1: GLdouble, ++u2: GLdouble,
               ++stride: GLint, ++order: GLint, ++points: *GLdouble);
    fn glMap1f(++target: GLenum, ++u1: GLfloat, ++u2: GLfloat,
               ++stride: GLint, ++order: GLint, ++points: *GLfloat);
    fn glMap2d(++target: GLenum, ++u1: GLdouble, ++u2: GLdouble,
               ++ustride: GLint, ++uorder: GLint, ++v1: GLdouble,
               ++v2: GLdouble, ++vstride: GLint, ++vorder: GLint,
               ++points: *GLdouble);
    fn glMap2f(++target: GLenum, ++u1: GLfloat, ++u2: GLfloat,
               ++ustride: GLint, ++uorder: GLint, ++v1: GLfloat,
               ++v2: GLfloat, ++vstride: GLint, ++vorder: GLint,
               ++points: *GLfloat);
    fn glGetMapdv(++target: GLenum, ++query: GLenum, ++v: *GLdouble);
    fn glGetMapfv(++target: GLenum, ++query: GLenum, ++v: *GLfloat);
    fn glGetMapiv(++target: GLenum, ++query: GLenum, ++v: *GLint);
    fn glEvalCoord1d(++u: GLdouble);
    fn glEvalCoord1f(++u: GLfloat);
    fn glEvalCoord1dv(++u: *GLdouble);
    fn glEvalCoord1fv(++u: *GLfloat);
    fn glEvalCoord2d(++u: GLdouble, ++v: GLdouble);
    fn glEvalCoord2f(++u: GLfloat, ++v: GLfloat);
    fn glEvalCoord2dv(++u: *GLdouble);
    fn glEvalCoord2fv(++u: *GLfloat);
    fn glMapGrid1d(++un: GLint, ++u1: GLdouble, ++u2: GLdouble);
    fn glMapGrid1f(++un: GLint, ++u1: GLfloat, ++u2: GLfloat);
    fn glMapGrid2d(++un: GLint, ++u1: GLdouble, ++u2: GLdouble, ++vn: GLint,
                   ++v1: GLdouble, ++v2: GLdouble);
    fn glMapGrid2f(++un: GLint, ++u1: GLfloat, ++u2: GLfloat, ++vn: GLint,
                   ++v1: GLfloat, ++v2: GLfloat);
    fn glEvalPoint1(++i: GLint);
    fn glEvalPoint2(++i: GLint, ++j: GLint);
    fn glEvalMesh1(++mode: GLenum, ++i1: GLint, ++i2: GLint);
    fn glEvalMesh2(++mode: GLenum, ++i1: GLint, ++i2: GLint, ++j1: GLint,
                   ++j2: GLint);
    fn glFogf(++pname: GLenum, ++param: GLfloat);
    fn glFogi(++pname: GLenum, ++param: GLint);
    fn glFogfv(++pname: GLenum, ++params: *GLfloat);
    fn glFogiv(++pname: GLenum, ++params: *GLint);
    fn glFeedbackBuffer(++size: GLsizei, ++_type: GLenum, ++buffer: *GLfloat);
    fn glPassThrough(++token: GLfloat);
    fn glSelectBuffer(++size: GLsizei, ++buffer: *GLuint);
    fn glInitNames();
    fn glLoadName(++name: GLuint);
    fn glPushName(++name: GLuint);
    fn glPopName();
    fn glDrawRangeElements(++mode: GLenum, ++start: GLuint, ++end: GLuint,
                           ++count: GLsizei, ++_type: GLenum,
                           ++indices: *GLvoid);
    fn glTexImage3D(++target: GLenum, ++level: GLint, ++internalFormat: GLint,
                    ++width: GLsizei, ++height: GLsizei, ++depth: GLsizei,
                    ++border: GLint, ++format: GLenum, ++_type: GLenum,
                    ++pixels: *GLvoid);
    fn glTexSubImage3D(++target: GLenum, ++level: GLint, ++xoffset: GLint,
                       ++yoffset: GLint, ++zoffset: GLint, ++width: GLsizei,
                       ++height: GLsizei, ++depth: GLsizei, ++format: GLenum,
                       ++_type: GLenum, ++pixels: *GLvoid);
    fn glCopyTexSubImage3D(++target: GLenum, ++level: GLint, ++xoffset: GLint,
                           ++yoffset: GLint, ++zoffset: GLint, ++x: GLint,
                           ++y: GLint, ++width: GLsizei, ++height: GLsizei);
    fn glColorTable(++target: GLenum, ++internalformat: GLenum,
                    ++width: GLsizei, ++format: GLenum, ++_type: GLenum,
                    ++table: *GLvoid);
    fn glColorSubTable(++target: GLenum, ++start: GLsizei, ++count: GLsizei,
                       ++format: GLenum, ++_type: GLenum, ++data: *GLvoid);
    fn glColorTableParameteriv(++target: GLenum, ++pname: GLenum,
                               ++params: *GLint);
    fn glColorTableParameterfv(++target: GLenum, ++pname: GLenum,
                               ++params: *GLfloat);
    fn glCopyColorSubTable(++target: GLenum, ++start: GLsizei, ++x: GLint,
                           ++y: GLint, ++width: GLsizei);
    fn glCopyColorTable(++target: GLenum, ++internalformat: GLenum,
                        ++x: GLint, ++y: GLint, ++width: GLsizei);
    fn glGetColorTable(++target: GLenum, ++format: GLenum, ++_type: GLenum,
                       ++table: *GLvoid);
    fn glGetColorTableParameterfv(++target: GLenum, ++pname: GLenum,
                                  ++params: *GLfloat);
    fn glGetColorTableParameteriv(++target: GLenum, ++pname: GLenum,
                                  ++params: *GLint);
    fn glBlendEquation(++mode: GLenum);
    fn glBlendColor(++red: GLclampf, ++green: GLclampf, ++blue: GLclampf,
                    ++alpha: GLclampf);
    fn glHistogram(++target: GLenum, ++width: GLsizei,
                   ++internalformat: GLenum, ++sink: GLboolean);
    fn glResetHistogram(++target: GLenum);
    fn glGetHistogram(++target: GLenum, ++reset: GLboolean, ++format: GLenum,
                      ++_type: GLenum, ++values: *GLvoid);
    fn glGetHistogramParameterfv(++target: GLenum, ++pname: GLenum,
                                 ++params: *GLfloat);
    fn glGetHistogramParameteriv(++target: GLenum, ++pname: GLenum,
                                 ++params: *GLint);
    fn glMinmax(++target: GLenum, ++internalformat: GLenum,
                ++sink: GLboolean);
    fn glResetMinmax(++target: GLenum);
    fn glGetMinmax(++target: GLenum, ++reset: GLboolean, ++format: GLenum,
                   ++types: GLenum, ++values: *GLvoid);
    fn glGetMinmaxParameterfv(++target: GLenum, ++pname: GLenum,
                              ++params: *GLfloat);
    fn glGetMinmaxParameteriv(++target: GLenum, ++pname: GLenum,
                              ++params: *GLint);
    fn glConvolutionFilter1D(++target: GLenum, ++internalformat: GLenum,
                             ++width: GLsizei, ++format: GLenum,
                             ++_type: GLenum, ++image: *GLvoid);
    fn glConvolutionFilter2D(++target: GLenum, ++internalformat: GLenum,
                             ++width: GLsizei, ++height: GLsizei,
                             ++format: GLenum, ++_type: GLenum,
                             ++image: *GLvoid);
    fn glConvolutionParameterf(++target: GLenum, ++pname: GLenum,
                               ++params: GLfloat);
    fn glConvolutionParameterfv(++target: GLenum, ++pname: GLenum,
                                ++params: *GLfloat);
    fn glConvolutionParameteri(++target: GLenum, ++pname: GLenum,
                               ++params: GLint);
    fn glConvolutionParameteriv(++target: GLenum, ++pname: GLenum,
                                ++params: *GLint);
    fn glCopyConvolutionFilter1D(++target: GLenum, ++internalformat: GLenum,
                                 ++x: GLint, ++y: GLint, ++width: GLsizei);
    fn glCopyConvolutionFilter2D(++target: GLenum, ++internalformat: GLenum,
                                 ++x: GLint, ++y: GLint, ++width: GLsizei,
                                 ++height: GLsizei);
    fn glGetConvolutionFilter(++target: GLenum, ++format: GLenum,
                              ++_type: GLenum, ++image: *GLvoid);
    fn glGetConvolutionParameterfv(++target: GLenum, ++pname: GLenum,
                                   ++params: *GLfloat);
    fn glGetConvolutionParameteriv(++target: GLenum, ++pname: GLenum,
                                   ++params: *GLint);
    fn glSeparableFilter2D(++target: GLenum, ++internalformat: GLenum,
                           ++width: GLsizei, ++height: GLsizei,
                           ++format: GLenum, ++_type: GLenum, ++row: *GLvoid,
                           ++column: *GLvoid);
    fn glGetSeparableFilter(++target: GLenum, ++format: GLenum,
                            ++_type: GLenum, ++row: *GLvoid,
                            ++column: *GLvoid, ++span: *GLvoid);
    fn glActiveTexture(++texture: GLenum);
    fn glClientActiveTexture(++texture: GLenum);
    fn glCompressedTexImage1D(++target: GLenum, ++level: GLint,
                              ++internalformat: GLenum, ++width: GLsizei,
                              ++border: GLint, ++imageSize: GLsizei,
                              ++data: *GLvoid);
    fn glCompressedTexImage2D(++target: GLenum, ++level: GLint,
                              ++internalformat: GLenum, ++width: GLsizei,
                              ++height: GLsizei, ++border: GLint,
                              ++imageSize: GLsizei, ++data: *GLvoid);
    fn glCompressedTexImage3D(++target: GLenum, ++level: GLint,
                              ++internalformat: GLenum, ++width: GLsizei,
                              ++height: GLsizei, ++depth: GLsizei,
                              ++border: GLint, ++imageSize: GLsizei,
                              ++data: *GLvoid);
    fn glCompressedTexSubImage1D(++target: GLenum, ++level: GLint,
                                 ++xoffset: GLint, ++width: GLsizei,
                                 ++format: GLenum, ++imageSize: GLsizei,
                                 ++data: *GLvoid);
    fn glCompressedTexSubImage2D(++target: GLenum, ++level: GLint,
                                 ++xoffset: GLint, ++yoffset: GLint,
                                 ++width: GLsizei, ++height: GLsizei,
                                 ++format: GLenum, ++imageSize: GLsizei,
                                 ++data: *GLvoid);
    fn glCompressedTexSubImage3D(++target: GLenum, ++level: GLint,
                                 ++xoffset: GLint, ++yoffset: GLint,
                                 ++zoffset: GLint, ++width: GLsizei,
                                 ++height: GLsizei, ++depth: GLsizei,
                                 ++format: GLenum, ++imageSize: GLsizei,
                                 ++data: *GLvoid);
    fn glGetCompressedTexImage(++target: GLenum, ++lod: GLint,
                               ++img: *GLvoid);
    fn glMultiTexCoord1d(++target: GLenum, ++s: GLdouble);
    fn glMultiTexCoord1dv(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord1f(++target: GLenum, ++s: GLfloat);
    fn glMultiTexCoord1fv(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord1i(++target: GLenum, ++s: GLint);
    fn glMultiTexCoord1iv(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord1s(++target: GLenum, ++s: GLshort);
    fn glMultiTexCoord1sv(++target: GLenum, ++v: *GLshort);
    fn glMultiTexCoord2d(++target: GLenum, ++s: GLdouble, ++t: GLdouble);
    fn glMultiTexCoord2dv(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord2f(++target: GLenum, ++s: GLfloat, ++t: GLfloat);
    fn glMultiTexCoord2fv(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord2i(++target: GLenum, ++s: GLint, ++t: GLint);
    fn glMultiTexCoord2iv(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord2s(++target: GLenum, ++s: GLshort, ++t: GLshort);
    fn glMultiTexCoord2sv(++target: GLenum, ++v: *GLshort);
    fn glMultiTexCoord3d(++target: GLenum, ++s: GLdouble, ++t: GLdouble,
                         ++r: GLdouble);
    fn glMultiTexCoord3dv(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord3f(++target: GLenum, ++s: GLfloat, ++t: GLfloat,
                         ++r: GLfloat);
    fn glMultiTexCoord3fv(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord3i(++target: GLenum, ++s: GLint, ++t: GLint,
                         ++r: GLint);
    fn glMultiTexCoord3iv(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord3s(++target: GLenum, ++s: GLshort, ++t: GLshort,
                         ++r: GLshort);
    fn glMultiTexCoord3sv(++target: GLenum, ++v: *GLshort);
    fn glMultiTexCoord4d(++target: GLenum, ++s: GLdouble, ++t: GLdouble,
                         ++r: GLdouble, ++q: GLdouble);
    fn glMultiTexCoord4dv(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord4f(++target: GLenum, ++s: GLfloat, ++t: GLfloat,
                         ++r: GLfloat, ++q: GLfloat);
    fn glMultiTexCoord4fv(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord4i(++target: GLenum, ++s: GLint, ++t: GLint, ++r: GLint,
                         ++q: GLint);
    fn glMultiTexCoord4iv(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord4s(++target: GLenum, ++s: GLshort, ++t: GLshort,
                         ++r: GLshort, ++q: GLshort);
    fn glMultiTexCoord4sv(++target: GLenum, ++v: *GLshort);
    fn glLoadTransposeMatrixd(++m: *GLdouble);
    fn glLoadTransposeMatrixf(++m: *GLfloat);
    fn glMultTransposeMatrixd(++m: *GLdouble);
    fn glMultTransposeMatrixf(++m: *GLfloat);
    fn glSampleCoverage(++value: GLclampf, ++invert: GLboolean);
    fn glActiveTextureARB(++texture: GLenum);
    fn glClientActiveTextureARB(++texture: GLenum);
    fn glMultiTexCoord1dARB(++target: GLenum, ++s: GLdouble);
    fn glMultiTexCoord1dvARB(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord1fARB(++target: GLenum, ++s: GLfloat);
    fn glMultiTexCoord1fvARB(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord1iARB(++target: GLenum, ++s: GLint);
    fn glMultiTexCoord1ivARB(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord1sARB(++target: GLenum, ++s: GLshort);
    fn glMultiTexCoord1svARB(++target: GLenum, ++v: *GLshort);
    fn glMultiTexCoord2dARB(++target: GLenum, ++s: GLdouble, ++t: GLdouble);
    fn glMultiTexCoord2dvARB(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord2fARB(++target: GLenum, ++s: GLfloat, ++t: GLfloat);
    fn glMultiTexCoord2fvARB(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord2iARB(++target: GLenum, ++s: GLint, ++t: GLint);
    fn glMultiTexCoord2ivARB(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord2sARB(++target: GLenum, ++s: GLshort, ++t: GLshort);
    fn glMultiTexCoord2svARB(++target: GLenum, ++v: *GLshort);
    fn glMultiTexCoord3dARB(++target: GLenum, ++s: GLdouble, ++t: GLdouble,
                            ++r: GLdouble);
    fn glMultiTexCoord3dvARB(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord3fARB(++target: GLenum, ++s: GLfloat, ++t: GLfloat,
                            ++r: GLfloat);
    fn glMultiTexCoord3fvARB(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord3iARB(++target: GLenum, ++s: GLint, ++t: GLint,
                            ++r: GLint);
    fn glMultiTexCoord3ivARB(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord3sARB(++target: GLenum, ++s: GLshort, ++t: GLshort,
                            ++r: GLshort);
    fn glMultiTexCoord3svARB(++target: GLenum, ++v: *GLshort);
    fn glMultiTexCoord4dARB(++target: GLenum, ++s: GLdouble, ++t: GLdouble,
                            ++r: GLdouble, ++q: GLdouble);
    fn glMultiTexCoord4dvARB(++target: GLenum, ++v: *GLdouble);
    fn glMultiTexCoord4fARB(++target: GLenum, ++s: GLfloat, ++t: GLfloat,
                            ++r: GLfloat, ++q: GLfloat);
    fn glMultiTexCoord4fvARB(++target: GLenum, ++v: *GLfloat);
    fn glMultiTexCoord4iARB(++target: GLenum, ++s: GLint, ++t: GLint,
                            ++r: GLint, ++q: GLint);
    fn glMultiTexCoord4ivARB(++target: GLenum, ++v: *GLint);
    fn glMultiTexCoord4sARB(++target: GLenum, ++s: GLshort, ++t: GLshort,
                            ++r: GLshort, ++q: GLshort);
    fn glMultiTexCoord4svARB(++target: GLenum, ++v: *GLshort);
}
